{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./scripts/src/getPopulationData.ts","webpack:///./scripts/src/donwload-data.ts","webpack:///./src/services/monthly-unemployment-data.ts","webpack:///./src/contexts/AppContextProvider.tsx","webpack:///./scripts/src/constants.ts","webpack:///./src/utils/URLHashParams.ts","webpack:///./src/components/ArcGIS/MapView.tsx","webpack:///./src/constants/map.ts","webpack:///./src/constants/style.ts","webpack:///./src/components/AppLayout/AppLayout.tsx","webpack:///./src/components/InfoPanel/InfoText.tsx","webpack:///./src/components/Header/Header.tsx","webpack:///./src/components/About/About.tsx","webpack:///./src/components/InfoPanel/SummaryInfo.tsx","webpack:///./src/components/InfoPanel/UnemploymentInfo.tsx","webpack:///./src/components/QuickD3Chart/constants.ts","webpack:///./src/components/QuickD3Chart/elements/Bars.tsx","webpack:///./src/components/QuickD3Chart/elements/Line.tsx","webpack:///./src/components/QuickD3Chart/elements/PointerEventsOverlay.tsx","webpack:///./src/components/QuickD3Chart/elements/SvgContainer.tsx","webpack:///./src/components/QuickD3Chart/elements/Tooltip.tsx","webpack:///./src/components/QuickD3Chart/elements/TooltipContent.tsx","webpack:///./src/components/QuickD3Chart/elements/XAxis.tsx","webpack:///./src/components/QuickD3Chart/elements/YAxis.tsx","webpack:///./src/components/QuickD3Chart/BarLineCombined/BarLineCombined.tsx","webpack:///./src/components/InfoPanel/Chart.tsx","webpack:///./src/components/InfoPanel/InfoPanel.tsx","webpack:///./src/components/QueryResult/QueryResult.tsx","webpack:///./src/components/QueryTask/QueryTask.tsx","webpack:///./src/components/SparklineLayer/SparklineLayer.tsx","webpack:///./src/components/SparklineLayerSwitcher/SparklineLayerSwitcher.tsx","webpack:///./src/pages/Root/RootPage.tsx","webpack:///./src/index.tsx"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","require","fetch","setDefaultRequestOptions","UNEMPLOYMENT_SERVICE_URL","outFields","queryMonths","a","axios","params","where","join","returnGeometry","f","features","feature","attributes","CurrentMonth","P01Month","P02Month","P03Month","P04Month","P05Month","P06Month","P07Month","P08Month","P09Month","P10Month","P11Month","P12Month","P13Month","reverse","AppContext","createContext","fetchDataFromPublicFolder","filename","AppContextProvider","children","useState","setValue","loadAppData","unemploymentDataPathsStates","unemploymentDataPathsCounties","unemploymentDataPathsUS","unemploymentDataByFIPS","months","isMobileDevice","miscFns","React","useEffect","Provider","DefaultHashParams","urlFns","parseHash","getDefaultValueFromHashParams","getMapLocationFromUrlSearchParams","updateMapLocation","mapLocation","lon","lat","zoom","updateHashParam","hashParams","values","split","map","updateFIPSInURLHashParams","FIPS","defaultMapLocation","MapView","webmapId","mapDivRef","useRef","mapView","setMapView","initMapView","loadModules","WebMap","center","undefined","view","container","current","portalItem","id","padding","top","when","addWatchEvent","whenTrue","centerLocation","latitude","toFixed","longitude","loadCss","style","position","left","width","height","ref","Children","child","cloneElement","VISIBLE_SCALE_STATES","min","max","VISIBLE_SCALE_COUNTIES","SPARKLINE_COLOR_ORANGE","SPARKLINE_COLOR_BLUE","defaultFIPS","AppLayout","useContext","unemploymentData4SelectedFeature","setUnemploymentData4SelectedFeature","showDeviation","setShowDeviation","selectedFeature","setSelectedFeature","showAbout","setShowAbout","isActive","onClose","infoBtnOnClick","onChange","nationalLevelData","visibleScale","color","referenceLineColor","QueryTask","url","onSelect","queryResult","close","FontSizeLookup","default","small","medium","large","ThemeText","size","customFontSize","customLineHeight","classNames","classnames","fontSize","lineHeight","className","InfoText","title","subtitle","display","alignItems","HeaderContainer","styled","div","AppTitle","SubTitle","Title","cursor","onClick","xmlns","viewBox","Header","AboutContainer","AboutContent","About","rel","href","target","SummaryInfoContainer","SummaryInfo","participationRate","useMemo","Math","floor","workforce","unemployed","numberFns","numberWithCommas","population","borderRight","UnemploymentInfoContainer","UnemploymentRateTextWrap","StatisticsInfoContainer","InfoTextWrap","getStatistics","PctUnemployed","idx4lastMonth","idx4LastYear","index4LowesetMonth","idx4highestMonth","idx","month","year","toUpperCase","unemploymentCategory","rate","UnemploymentInfo","lastMonth","lastYear","lowest","highest","marginBottom","unemploymentRate","maxWidth","marginTop","rank","fips","toString","MARGIN","right","bottom","Bars","xScale","yScale","svgContainerData","barsGroup","existingBars","dimension","select","selectAll","remove","enter","append","attr","bandwidth","Line","lineGroup","xOffset","valueline","line","curve","curveMonotoneX","x","y","lines","exit","PointerEventsOverlay","xDomain","onHover","containerG","itemOnHover","setDataOnHover","updateVerticalRefLinePos","vRefLine","opacity","xPos","xPosition","getDataByMousePos","mousePosX","offset","index","index4ItemOnHover","itemIndex","len","currItem","currItemPos","nextItemIndex","nextItem","nextItemPos","distToCurrItem","abs","distToNextItem","on","mouse","this","initOverlayRect","SvgContainer","margin","resizable","dimensionOnChange","containerRef","svgRef","rootGroupRef","dimensionRef","setSvgContainerData","updateDimension","svg","node","rootGroup","offsetWidth","offsetHeight","useLayoutEffect","addEventListener","removeEventListener","transform","Tooltip","pointerPosition","data4Bars","data4Line","tooltipRef","tooltipPos","setTooltipPos","tooltipDiv","tooltipDivWidth","xPosForItemOnHover","updateTooltipPosition","pointerEvents","boxSizing","boxShadow","zIndex","barDataOnHover","lineDataOnHover","TooltipContent","background","YAxis","scale","tickValues","timeFormatSpecifier","formatTime","timeFormat","xAxisGenerator","axisBottom","tickFormat","date","Date","abbreviation","xAxisLabel","xAxisG","drawXAxis","XAxis","yAxis","axisLeft","ticks","tickPadding","yAxisLabel","yAxisG","drawYAxis","BarLineCombined","barColor","lineColor","lineWidth","numOfTicksOnXAxisToHide","setDimension","pointerPositionOnHover","setPointerPositionOnHover","scaleBand","paddingInner","range","domain","xmin","xmax","scaleTime","scaleLinear","ymax4Bars","ymax4Lines","ymax","xScaleTickValues","filter","getChartData","Chart","flexGrow","InfoPanelContainer","CloseBtnDiv","InfoPanel","QueryResult","graphicLayer","setGraphicLayer","init","GraphicsLayer","layer","add","showQueryResult","Graphic","Polygon","SimpleFillSymbol","graphic","geometry","symbol","removeAll","QueryTaskLayer","layerRef","layerViewRef","FeatureLayer","minScale","maxScale","visible","popupEnabled","whenLayerView","then","layerView","initEventListeners","queryFeatures","event","toMap","results","SparklineLayer","renderDealy","isLayerInVisibleScale","setIsLayerInVisibleScale","watchUtils","isInVisibleScale","draw","nationalLevelPathData","path","nationalLevelFrame","frames","CIMSymbol","Point","frame","PctUnemployedDeviation","addGraphicsByChunk","startIndex","chunckNum","endIndex","graphics","anchorPoint","type","symbolLayers","anchorPointUnits","enable","scaleSymbolsProportionally","respectFrame","markerGraphics","paths","addMany","setTimeout","clearTimeout","SwitcherBtn","borderColor","borderBottom","SparklineLayerSwitcher","RootPage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"main.46a172f95c42574072a7.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([135,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","// ArcGIS REST JS is supported in Node.js 8.x and above. It requires additional packages to polyfill Fetch and FormData.\r\nrequire('isomorphic-form-data');\r\nconst fetch = require('node-fetch');\r\nimport { IQueryFeaturesResponse, queryFeatures } from '@esri/arcgis-rest-feature-layer';\r\nimport { setDefaultRequestOptions } from '@esri/arcgis-rest-request';\r\nimport {\r\n    getStateAbbrev\r\n} from './getStateAbbrev';\r\n\r\n// use node-fetch for each request instead of relying on a global\r\nsetDefaultRequestOptions({ fetch })\r\n\r\ntype PopulationLookup = {\r\n    [fips:string]: {\r\n        name: string;\r\n        population: number;\r\n    }\r\n}\r\n\r\nexport const populationLookup:PopulationLookup = {};\r\n\r\nconst ACS_TOTAL_POPULATION_FEATURE_SERVICE_URL = 'https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/ACS_Total_Population_Boundaries/FeatureServer';\r\n\r\nexport const downloadACSData = async()=>{\r\n\r\n    const outFields = ['GEOID','NAME','B01001_001E'];\r\n\r\n    const queryResponse4States = await queryFeatures({\r\n        url: `${ACS_TOTAL_POPULATION_FEATURE_SERVICE_URL}/0`,\r\n        where: '1=1',\r\n        outFields,\r\n        returnGeometry: false,\r\n        f: 'json'\r\n    }) as IQueryFeaturesResponse\r\n\r\n    const queryResponse4Counties1 = await queryFeatures({\r\n        url: `${ACS_TOTAL_POPULATION_FEATURE_SERVICE_URL}/1/query`,\r\n        where: '1=1',\r\n        outFields,\r\n        returnGeometry: false,\r\n        f: 'json'\r\n    }) as IQueryFeaturesResponse\r\n\r\n    const queryResponse4Counties2 = await queryFeatures({\r\n        url: `${ACS_TOTAL_POPULATION_FEATURE_SERVICE_URL}/1/query`,\r\n        where: '1=1',\r\n        outFields,\r\n        returnGeometry: false,\r\n        resultOffset: 2000,\r\n        f: 'json'\r\n    }) as IQueryFeaturesResponse\r\n\r\n    if(queryResponse4States && queryResponse4States.features){\r\n\r\n        const { features } = queryResponse4States;\r\n\r\n        for(let feature of features){\r\n            const {\r\n                GEOID,\r\n                NAME,\r\n                B01001_001E\r\n            } = feature.attributes;\r\n    \r\n            populationLookup[GEOID] = {\r\n                name: NAME,\r\n                population: B01001_001E\r\n            }\r\n        }\r\n    }\r\n\r\n    if(\r\n        queryResponse4Counties1 && \r\n        queryResponse4Counties1.features &&\r\n        queryResponse4Counties2 && \r\n        queryResponse4Counties2.features\r\n    ){\r\n        const features = [\r\n            ...queryResponse4Counties1.features,\r\n            ...queryResponse4Counties2.features\r\n        ]\r\n\r\n        for(let feature of features){\r\n            const {\r\n                GEOID,\r\n                NAME,\r\n                B01001_001E\r\n            } = feature.attributes;\r\n\r\n            let countyName = NAME;\r\n\r\n            if(/\\sCensus Area/gi.test(NAME)){\r\n                countyName = NAME.replace(/\\sCensus Area/gi, '');\r\n            } \r\n            else if (/\\sCity and Borough/gi.test(NAME)){\r\n                countyName = NAME.replace(/\\sCity and Borough/gi, '');\r\n            }\r\n            else {\r\n                // remove the word \"county\" from end of the county name \r\n                countyName = NAME.split(' ').slice(0, -1).join(' ');\r\n            }\r\n\r\n            const stateName = getStateAbbrev(GEOID.slice(0,2));\r\n\r\n            const name = GEOID === '11001' \r\n                ? stateName \r\n                : countyName + ', ' + stateName;\r\n    \r\n            populationLookup[GEOID] = {\r\n                name,\r\n                population: B01001_001E\r\n            }\r\n        }\r\n    }\r\n};","import axios from 'axios'\r\n\r\nexport const UNEMPLOYMENT_SERVICE_URL = 'https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/BLS_Monthly_Unemployment_Current_14_Months/FeatureServer';\r\nconst LAYER_ID_US = '0';\r\nconst LAYER_ID_STATE = '1';\r\nconst LAYER_ID_COUNTIES = '2';\r\n\r\nimport {\r\n    UnempolymentData, \r\n    MonthlyUmempolymentData\r\n} from '../../shared/types';\r\n\r\nimport {\r\n    populationLookup\r\n} from './getPopulationData'\r\n\r\ntype MonthlyUnemploymentFeature = {\r\n    attributes: {\r\n        fips: string;\r\n\r\n        PctUnemployed_CurrentMonth: number;\r\n        PctUnemployed_01Month : number;\r\n        PctUnemployed_02Month : number;\r\n        PctUnemployed_03Month : number;\r\n        PctUnemployed_04Month : number;\r\n        PctUnemployed_05Month : number;\r\n        PctUnemployed_06Month : number;\r\n        PctUnemployed_07Month : number;\r\n        PctUnemployed_08Month : number;\r\n        PctUnemployed_09Month : number;\r\n        PctUnemployed_10Month : number;\r\n        PctUnemployed_11Month : number;\r\n        PctUnemployed_12Month : number;\r\n        PctUnemployed_13Month : number;\r\n\r\n        LaborForce_CurrentMonth: number;\r\n        Unemployed_CurrentMonth: number;\r\n\r\n        CurrentMonth: string;\r\n        P13Month: string;\r\n\r\n        [key:string]: any;\r\n    },\r\n    centroid: {\r\n        x: number;\r\n        y: number;\r\n    }\r\n}\r\n\r\ntype QueryResult = {\r\n    features: MonthlyUnemploymentFeature[]\r\n}\r\n\r\nconst outFields = 'fips, PctUnemployed_CurrentMonth, PctUnemployed_01Month, PctUnemployed_02Month, PctUnemployed_03Month, PctUnemployed_04Month, PctUnemployed_05Month, PctUnemployed_06Month, PctUnemployed_07Month, PctUnemployed_08Month, PctUnemployed_09Month, PctUnemployed_10Month, PctUnemployed_11Month, PctUnemployed_12Month, PctUnemployed_13Month, CurrentMonth, P13Month, LaborForce_CurrentMonth, Unemployed_CurrentMonth';\r\n\r\nconst queryParams = {\r\n    f: 'json',\r\n    // exclude Puerto Rico\r\n    where: 'fips <> 72',\r\n    returnGeometry: false,\r\n    returnCentroid: true,\r\n    outSR: 4326,\r\n    outFields\r\n}\r\n\r\nconst QueryParams = `f=json&where=1=1&returnGeometry=false&returnCentroid=true&outSR=4326&outFields=${outFields}`;\r\n\r\n// use this function to fetch data for all 50 states or the entire US\r\nexport const fecthData4States = async(shouldFetchNationalAverage=false):Promise<MonthlyUmempolymentData>=>{\r\n\r\n    const layerId = shouldFetchNationalAverage ? LAYER_ID_US : LAYER_ID_STATE;\r\n\r\n    try{\r\n        const { data } = await axios.get<QueryResult>(`${UNEMPLOYMENT_SERVICE_URL}/${layerId}/query`, { params: queryParams });\r\n        return processQueryResult(data.features);\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport const fetchData4Counties = async():Promise<MonthlyUmempolymentData>=>{\r\n    try {\r\n\r\n        const response4Counties1 = await axios.get<QueryResult>(`${UNEMPLOYMENT_SERVICE_URL}/${LAYER_ID_COUNTIES}/query?${QueryParams}`);\r\n\r\n        const response4Counties2 = await axios.get<QueryResult>(`${UNEMPLOYMENT_SERVICE_URL}/${LAYER_ID_COUNTIES}/query?${QueryParams}&resultOffset=2000`);\r\n\r\n        const features = [\r\n            ...response4Counties1.data.features,\r\n            ...response4Counties2.data.features\r\n        ];\r\n\r\n        return processQueryResult(features)\r\n\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nconst processQueryResult = (features:MonthlyUnemploymentFeature[]):MonthlyUmempolymentData=>{\r\n\r\n    if(!features || !features.length){\r\n        return;\r\n    }\r\n\r\n    let maxPctUnemployed = 0;\r\n\r\n    const pctUnemployedSorted = features\r\n        .map(feature=>{\r\n            const {\r\n                attributes,\r\n            } = feature;\r\n\r\n            const { \r\n                PctUnemployed_CurrentMonth,\r\n            } = attributes;\r\n\r\n            return PctUnemployed_CurrentMonth\r\n        })\r\n        .sort((a,b)=>b-a);\r\n\r\n    const data:UnempolymentData[] = features.map(feature=>{\r\n\r\n        const {\r\n            attributes,\r\n            centroid\r\n        } = feature;\r\n\r\n        const { \r\n            fips,\r\n            PctUnemployed_CurrentMonth,\r\n            PctUnemployed_01Month,\r\n            PctUnemployed_02Month,\r\n            PctUnemployed_03Month,\r\n            PctUnemployed_04Month,\r\n            PctUnemployed_05Month,\r\n            PctUnemployed_06Month,\r\n            PctUnemployed_07Month,\r\n            PctUnemployed_08Month,\r\n            PctUnemployed_09Month,\r\n            PctUnemployed_10Month,\r\n            PctUnemployed_11Month,\r\n            PctUnemployed_12Month,\r\n            PctUnemployed_13Month,\r\n            LaborForce_CurrentMonth,\r\n            Unemployed_CurrentMonth\r\n        } = attributes;\r\n\r\n        const PctUnemployed = [\r\n            PctUnemployed_13Month,\r\n            PctUnemployed_12Month,\r\n            PctUnemployed_11Month,\r\n            PctUnemployed_10Month,\r\n            PctUnemployed_09Month,\r\n            PctUnemployed_08Month,\r\n            PctUnemployed_07Month,\r\n            PctUnemployed_06Month,\r\n            PctUnemployed_05Month,\r\n            PctUnemployed_04Month,\r\n            PctUnemployed_03Month,\r\n            PctUnemployed_02Month,\r\n            PctUnemployed_01Month,\r\n            PctUnemployed_CurrentMonth\r\n        ];\r\n\r\n        maxPctUnemployed = Math.max(maxPctUnemployed, Math.max(...PctUnemployed))\r\n\r\n        const {\r\n            x, y\r\n        } = centroid;\r\n\r\n        const populationData = populationLookup[fips];\r\n\r\n        const name = populationData ? populationData.name : '';\r\n        const population = populationData ? populationData.population : 0;\r\n        const rank = binarySearchIdx(pctUnemployedSorted, PctUnemployed_CurrentMonth) + 1;\r\n\r\n        const geometry = {\r\n            x: +x.toFixed(5),\r\n            y: +y.toFixed(5)\r\n        };\r\n\r\n        return {\r\n            attributes: {\r\n                fips,\r\n                name,\r\n                population,\r\n                workforce: LaborForce_CurrentMonth,\r\n                unemployed: Unemployed_CurrentMonth,\r\n                unemploymentRate: PctUnemployed_CurrentMonth,\r\n                rank\r\n            },\r\n            geometry,\r\n            PctUnemployed,\r\n        };\r\n    });\r\n\r\n    return {\r\n        data,\r\n        maxPctUnemployed\r\n    }\r\n};\r\n\r\nexport const addDeviationData = (monthlyUnemploymentData:MonthlyUmempolymentData, nationalUnemploymentData:MonthlyUmempolymentData):MonthlyUmempolymentData=>{\r\n\r\n    const pctUnemployedFromNationalData = nationalUnemploymentData.data[0].PctUnemployed;\r\n\r\n    if(!pctUnemployedFromNationalData || !pctUnemployedFromNationalData.length){\r\n        console.error('failed to calc deviation data - national unemployment data are not available');\r\n        return;\r\n    }\r\n\r\n    let maxPctUnemployedDeviation = 0;\r\n\r\n    monthlyUnemploymentData.data = monthlyUnemploymentData.data.map(d=>{\r\n\r\n        const { PctUnemployed } = d;\r\n\r\n        const PctUnemployedDeviation = PctUnemployed.map((pctUnemployed, idx)=>{\r\n            const pctUnemployedNational = pctUnemployedFromNationalData[idx];\r\n            const deviation = +(pctUnemployed - pctUnemployedNational).toFixed(2);\r\n\r\n            if(Math.abs(deviation) > maxPctUnemployedDeviation){\r\n                maxPctUnemployedDeviation = Math.abs(deviation)\r\n            }\r\n\r\n            return deviation;\r\n        });\r\n\r\n        return {\r\n            ...d,\r\n            PctUnemployedDeviation,\r\n        }\r\n    })\r\n\r\n    return {\r\n        ...monthlyUnemploymentData,\r\n        maxPctUnemployedDeviation\r\n    };\r\n}\r\n// find index of target number from a desc sorted array, which will be used as rank\r\nconst binarySearchIdx = (nums: number[], target:number):number=>{\r\n    let left = 0;\r\n    let right = nums.length - 1;\r\n\r\n    while(left <= right){\r\n        const midIdx = Math.floor((left + right) / 2);\r\n\r\n        if(target < nums[midIdx]){\r\n            left = midIdx + 1;\r\n        } else {\r\n            right = midIdx - 1;\r\n        }\r\n    }\r\n\r\n    return left;\r\n}\r\n","import axios from 'axios';\nimport { UNEMPLOYMENT_SERVICE_URL } from '../../shared/constants';\n\nexport const queryMonths = async () => {\n    let result: string[] = [];\n\n    const { data } = await axios.get(`${UNEMPLOYMENT_SERVICE_URL}/0/query`, {\n        params: {\n            where: '1=1',\n            outFields: [\n                'CurrentMonth',\n                'P01Month',\n                'P02Month',\n                'P03Month',\n                'P04Month',\n                'P05Month',\n                'P06Month',\n                'P07Month',\n                'P08Month',\n                'P09Month',\n                'P10Month',\n                'P11Month',\n                'P12Month',\n                'P13Month',\n            ].join(','),\n            returnGeometry: false,\n            f: 'json',\n        },\n    });\n\n    if (data.features) {\n        const feature = data.features[0];\n\n        const {\n            CurrentMonth,\n            P01Month,\n            P02Month,\n            P03Month,\n            P04Month,\n            P05Month,\n            P06Month,\n            P07Month,\n            P08Month,\n            P09Month,\n            P10Month,\n            P11Month,\n            P12Month,\n            P13Month,\n        } = feature.attributes;\n\n        result = [\n            CurrentMonth,\n            P01Month,\n            P02Month,\n            P03Month,\n            P04Month,\n            P05Month,\n            P06Month,\n            P07Month,\n            P08Month,\n            P09Month,\n            P10Month,\n            P11Month,\n            P12Month,\n            P13Month,\n        ].reverse();\n    }\n\n    return result;\n};\n","import React, { useState, createContext } from 'react';\nimport axios from 'axios';\n\nimport {\n    MonthlyUmempolymentDataPaths,\n    UnempolymentDataByFIPS,\n} from '../../shared/types';\n\nimport {\n    UNEMPLOYMENT_PATHS_COUNTIES_FILE_NAME,\n    UNEMPLOYMENT_PATHS_STATES_FILE_NAME,\n    UNEMPLOYMENT_PATHS_US_FILE_NAME,\n    UNEMPLOYMENT_DATA_FILE_NAME,\n} from '../../shared/constants';\nimport { queryMonths } from '../services/monthly-unemployment-data';\n\nimport { miscFns } from 'helper-toolkit-ts';\n\nexport type AppContextValue = {\n    unemploymentDataPathsUS: MonthlyUmempolymentDataPaths;\n    unemploymentDataPathsStates: MonthlyUmempolymentDataPaths;\n    unemploymentDataPathsCounties: MonthlyUmempolymentDataPaths;\n    unemploymentDataByFIPS: UnempolymentDataByFIPS;\n    months: string[];\n    isMobileDevice?: boolean;\n};\n\ntype AppContextProviderProps = {\n    children?: React.ReactNode;\n};\n\nexport const AppContext = createContext<AppContextValue>(null);\n\nconst fetchDataFromPublicFolder = async <T extends unknown>(\n    filename: string\n): Promise<T> => {\n    const PUBLIC_PATH = './public';\n\n    try {\n        const { data } = await axios.get<T>(`${PUBLIC_PATH}/${filename}`);\n        return data;\n    } catch (err) {\n        console.error(err);\n    }\n\n    return null;\n};\n\nconst AppContextProvider: React.FC<AppContextProviderProps> = ({\n    children,\n}: AppContextProviderProps) => {\n    const [value, setValue] = useState<AppContextValue>();\n\n    const loadAppData = async () => {\n        try {\n            const unemploymentDataPathsStates = await fetchDataFromPublicFolder<\n                MonthlyUmempolymentDataPaths\n            >(UNEMPLOYMENT_PATHS_STATES_FILE_NAME);\n\n            const unemploymentDataPathsCounties = await fetchDataFromPublicFolder<\n                MonthlyUmempolymentDataPaths\n            >(UNEMPLOYMENT_PATHS_COUNTIES_FILE_NAME);\n\n            const unemploymentDataPathsUS = await fetchDataFromPublicFolder<\n                MonthlyUmempolymentDataPaths\n            >(UNEMPLOYMENT_PATHS_US_FILE_NAME);\n\n            const unemploymentDataByFIPS = await fetchDataFromPublicFolder<\n                UnempolymentDataByFIPS\n            >(UNEMPLOYMENT_DATA_FILE_NAME);\n\n            const months = await queryMonths();\n\n            setValue({\n                unemploymentDataPathsStates,\n                unemploymentDataPathsCounties,\n                unemploymentDataPathsUS,\n                unemploymentDataByFIPS,\n                months,\n                isMobileDevice: miscFns.isMobileDevice(),\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    React.useEffect(() => {\n        loadAppData();\n    }, []);\n\n    return (\n        <AppContext.Provider value={value}>\n            {value ? children : null}\n        </AppContext.Provider>\n    );\n};\n\nexport default AppContextProvider;\n","export const UNEMPLOYMENT_PATHS_COUNTIES_FILE_NAME = 'unemployment-counties-paths.json';\r\n// export const UNEMPLOYMENT_COUNTIES_FILE_NAME = 'unemployment-counties.json';\r\nexport const UNEMPLOYMENT_PATHS_STATES_FILE_NAME = 'unemployment-states-paths.json';\r\n// export const UNEMPLOYMENT_STATES_FILE_NAME = 'unemployment-states.json';\r\nexport const UNEMPLOYMENT_PATHS_US_FILE_NAME = 'unemployment-national-paths.json';\r\n// export const UNEMPLOYMENT_US_FILE_NAME = 'unemployment-national.json';\r\nexport const UNEMPLOYMENT_DATA_FILE_NAME = 'unemployment-data.json';","import { urlFns } from 'helper-toolkit-ts';\n\ntype UrlHashParamKey = '@' | 'fips';\n\ntype HashParams = {\n    [key: string]: string;\n};\n\nexport type MapLocation = {\n    lon: number;\n    lat: number;\n    zoom: number;\n};\n\nconst DefaultHashParams: HashParams = urlFns.parseHash();\n\nexport const getDefaultValueFromHashParams = (key: UrlHashParamKey) => {\n    if (key === '@') {\n        return getMapLocationFromUrlSearchParams(DefaultHashParams);\n    }\n\n    return DefaultHashParams[key] || null;\n};\n\nexport const updateMapLocation = (mapLocation: MapLocation) => {\n    const key: UrlHashParamKey = '@';\n\n    if (!mapLocation) {\n        return;\n    }\n\n    const { lon, lat, zoom } = mapLocation;\n\n    urlFns.updateHashParam({\n        key,\n        value: `${lon},${lat},${zoom}`,\n    });\n};\n\nconst getMapLocationFromUrlSearchParams = (hashParams: HashParams) => {\n    const key: UrlHashParamKey = '@';\n\n    if (!hashParams[key]) {\n        return null;\n    }\n\n    const values: number[] = hashParams[key].split(',').map((d: string) => +d);\n\n    const [lon, lat, zoom] = values;\n\n    return { lon, lat, zoom };\n};\n\nexport const updateFIPSInURLHashParams = (FIPS?: string) => {\n    const key: UrlHashParamKey = 'fips';\n\n    urlFns.updateHashParam({\n        key,\n        value: FIPS || '',\n    });\n};\n","import React from 'react';\n\nimport { loadModules, loadCss } from 'esri-loader';\nimport IMapView from 'esri/views/MapView';\nimport IWebMap from 'esri/WebMap';\nimport IwatchUtils from 'esri/core/watchUtils';\n\nimport {\n    updateMapLocation,\n    getDefaultValueFromHashParams,\n    MapLocation,\n} from '../../utils/URLHashParams';\n\ninterface Props {\n    webmapId: string;\n    children?: React.ReactNode;\n}\n\nconst defaultMapLocation = getDefaultValueFromHashParams('@') as MapLocation;\n\nconst MapView: React.FC<Props> = ({ webmapId, children }: Props) => {\n    const mapDivRef = React.useRef<HTMLDivElement>();\n\n    const [mapView, setMapView] = React.useState<IMapView>(null);\n\n    const initMapView = async () => {\n        type Modules = [typeof IMapView, typeof IWebMap];\n\n        try {\n            const [MapView, WebMap] = await (loadModules([\n                'esri/views/MapView',\n                'esri/WebMap',\n            ]) as Promise<Modules>);\n\n            const { lat, lon, zoom } = defaultMapLocation || {};\n\n            const center = lon && lat ? [lon, lat] : undefined;\n\n            const view = new MapView({\n                container: mapDivRef.current,\n                map: new WebMap({\n                    portalItem: {\n                        id: webmapId,\n                    },\n                }),\n                center,\n                zoom,\n                padding: {\n                    top: 60,\n                },\n            });\n\n            view.when(() => {\n                setMapView(view);\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    const addWatchEvent = async () => {\n        type Modules = [typeof IwatchUtils];\n\n        try {\n            const [watchUtils] = await (loadModules([\n                'esri/core/watchUtils',\n            ]) as Promise<Modules>);\n\n            watchUtils.whenTrue(mapView, 'stationary', () => {\n                // console.log('mapview is stationary', mapView.center, mapView.zoom);\n\n                if (mapView.zoom === -1) {\n                    return;\n                }\n\n                // console.log(mapView.scale)\n\n                const centerLocation = {\n                    lat:\n                        mapView.center && mapView.center.latitude\n                            ? +mapView.center.latitude.toFixed(3)\n                            : 0,\n                    lon:\n                        mapView.center && mapView.center.longitude\n                            ? +mapView.center.longitude.toFixed(3)\n                            : 0,\n                    zoom: mapView.zoom,\n                };\n\n                updateMapLocation(centerLocation);\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    React.useEffect(() => {\n        loadCss();\n        initMapView();\n    }, []);\n\n    React.useEffect(() => {\n        if (mapView) {\n            addWatchEvent();\n        }\n    }, [mapView]);\n\n    return (\n        <>\n            <div\n                style={{\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%',\n                }}\n                ref={mapDivRef}\n            ></div>\n            {mapView\n                ? React.Children.map(children, (child) => {\n                      return React.cloneElement(\n                          child as React.ReactElement<any>,\n                          {\n                              mapView,\n                          }\n                      );\n                  })\n                : null}\n        </>\n    );\n};\n\nexport default MapView;\n","export const WEB_MAP_ID = '8054e038927a48419ee0dddb86006ad6';\nexport const URL_US_STATES_GENERALIZED =\n    'https://services.arcgis.com/P3ePLMYs2RVChkJx/ArcGIS/rest/services/USA_States_Generalized/FeatureServer/0';\nexport const URL_US_COUNTIES_GENERALIZED =\n    'https://services.arcgis.com/P3ePLMYs2RVChkJx/ArcGIS/rest/services/USA_Counties_Generalized/FeatureServer/0';\n\nexport const VISIBLE_SCALE_STATES = {\n    min: 99999999,\n    max: 3000000,\n};\n\nexport const VISIBLE_SCALE_COUNTIES = {\n    min: 3000000,\n    max: 0,\n};\n","export const THEME_COLOR_ORANGE = '#FF8000';\nexport const THEME_COLOR_BLUE = '#136AA4';\n\nexport const SPARKLINE_COLOR_ORANGE = [255, 155, 10, 255]; //'#ff9b0a'\nexport const SPARKLINE_COLOR_BLUE = [51, 146, 214, 255]; // '#3392d6'\n\nexport const SEPARATOR_COLOR = 'rgba(20,106,164,.5)';\nexport const PANEL_BACKGROUND = 'rgba(3, 26, 57, 0.9)';\n\nexport const BREAKPOINT_SMALL = 767;\n","import React, { useContext, useState, useEffect } from 'react';\n\nimport { MapView } from '../ArcGIS';\n\nimport {\n    SparklineLayer,\n    SparklineLayerSwitcher,\n    QueryTaskLayer,\n    QueryResultLayer,\n    InfoPanel,\n    Header,\n    About,\n} from '../';\n\nimport {\n    URL_US_COUNTIES_GENERALIZED,\n    URL_US_STATES_GENERALIZED,\n    VISIBLE_SCALE_COUNTIES,\n    VISIBLE_SCALE_STATES,\n    WEB_MAP_ID,\n} from '../../constants/map';\n\nimport { AppContext, AppContextValue } from '../../contexts/AppContextProvider';\nimport {\n    SPARKLINE_COLOR_BLUE,\n    SPARKLINE_COLOR_ORANGE,\n} from '../../constants/style';\nimport { UnempolymentData } from '../../../shared/types';\n\nimport IGraphic from 'esri/Graphic';\n\nimport {\n    updateFIPSInURLHashParams,\n    getDefaultValueFromHashParams,\n} from '../../utils/URLHashParams';\n\nconst defaultFIPS = getDefaultValueFromHashParams('fips') as string;\n// console.log(defaultFIPS)\n\nconst AppLayout = () => {\n    const {\n        unemploymentDataPathsStates,\n        unemploymentDataPathsCounties,\n        unemploymentDataPathsUS,\n        unemploymentDataByFIPS,\n    } = useContext<AppContextValue>(AppContext);\n\n    // unemployment for selected county or state\n    const [\n        unemploymentData4SelectedFeature,\n        setUnemploymentData4SelectedFeature,\n    ] = useState<UnempolymentData>(unemploymentDataByFIPS[defaultFIPS]);\n\n    const [showDeviation, setShowDeviation] = useState<boolean>(false);\n\n    const [selectedFeature, setSelectedFeature] = useState<IGraphic>();\n\n    const [showAbout, setShowAbout] = useState<boolean>(false);\n\n    useEffect(() => {\n        if (selectedFeature) {\n            const FIPS = selectedFeature\n                ? selectedFeature.attributes['FIPS'] ||\n                  selectedFeature.attributes['STATE_FIPS']\n                : undefined;\n\n            setUnemploymentData4SelectedFeature(unemploymentDataByFIPS[FIPS]);\n\n            updateFIPSInURLHashParams(FIPS);\n        }\n    }, [selectedFeature]);\n\n    return (\n        <>\n            <About\n                isActive={showAbout}\n                onClose={setShowAbout.bind(this, false)}\n            />\n\n            <Header infoBtnOnClick={setShowAbout.bind(this, true)}>\n                <SparklineLayerSwitcher\n                    showDeviation={showDeviation}\n                    onChange={setShowDeviation.bind(this, !showDeviation)}\n                />\n            </Header>\n\n            <MapView webmapId={WEB_MAP_ID}>\n                <SparklineLayer\n                    showDeviation={showDeviation}\n                    nationalLevelData={unemploymentDataPathsUS}\n                    data={unemploymentDataPathsStates}\n                    visibleScale={VISIBLE_SCALE_STATES}\n                    color={SPARKLINE_COLOR_ORANGE}\n                    referenceLineColor={SPARKLINE_COLOR_BLUE}\n                />\n\n                <SparklineLayer\n                    showDeviation={showDeviation}\n                    nationalLevelData={unemploymentDataPathsUS}\n                    data={unemploymentDataPathsCounties}\n                    visibleScale={VISIBLE_SCALE_COUNTIES}\n                    color={SPARKLINE_COLOR_ORANGE}\n                    referenceLineColor={SPARKLINE_COLOR_BLUE}\n                />\n\n                <QueryTaskLayer\n                    key=\"query-4-US-Counties\"\n                    url={URL_US_COUNTIES_GENERALIZED}\n                    outFields={['FIPS']}\n                    visibleScale={VISIBLE_SCALE_COUNTIES}\n                    onSelect={setSelectedFeature}\n                />\n\n                <QueryTaskLayer\n                    key=\"query-4-US-States\"\n                    url={URL_US_STATES_GENERALIZED}\n                    outFields={['STATE_FIPS']}\n                    visibleScale={VISIBLE_SCALE_STATES}\n                    onSelect={setSelectedFeature}\n                />\n\n                <QueryResultLayer queryResult={selectedFeature} />\n            </MapView>\n\n            <InfoPanel\n                data={unemploymentData4SelectedFeature}\n                close={() => {\n                    setSelectedFeature(null);\n                    setUnemploymentData4SelectedFeature(null);\n                    updateFIPSInURLHashParams();\n                }}\n            />\n        </>\n    );\n};\n\nexport default AppLayout;\n","import React, { useContext } from 'react';\nimport classnames from 'classnames';\n// import styled from 'styled-components';\n\nimport { THEME_COLOR_ORANGE, THEME_COLOR_BLUE } from '../../constants/style';\nimport { AppContext, AppContextValue } from '../../contexts/AppContextProvider';\nimport { FontSize } from 'components/Atoms/CalciteElements/typing';\n\ntype Props = {\n    value: string;\n    title: string;\n    subtitle?: string;\n};\n\ntype TextColor = 'orange' | 'blue';\n\ntype FontSizeClass =\n    | 'font-size--3'\n    | 'font-size--2'\n    | 'font-size--1'\n    | 'font-size-0'\n    | 'font-size-1'\n    | 'font-size-2'\n    | 'font-size-3'\n    | 'font-size-4';\n\ntype TextSize = 'small' | 'medium' | 'large' | 'default';\n\nconst FontSizeLookup: Record<TextSize, FontSizeClass> = {\n    default: 'font-size-0',\n    small: 'font-size--2',\n    medium: 'font-size-2',\n    large: 'font-size-4',\n};\n\ntype TextProp = {\n    color?: TextColor;\n    size?: TextSize;\n    customFontSize?: string;\n    customLineHeight?: string;\n    children: React.ReactNode;\n};\n\nexport const ThemeText: React.FC<TextProp> = ({\n    color = 'blue',\n    size = 'default',\n    customFontSize,\n    customLineHeight,\n    children,\n}: TextProp) => {\n    // const fontSize = !customFontSize ? FontSizeLookup[size] : '';\n\n    // const { isMobileDevice } = useContext<AppContextValue>(AppContext)\n\n    const getFontSizeClass = (): FontSizeClass | '' => {\n        if (customFontSize) {\n            return '';\n        }\n\n        // if(isMobileDevice){\n        //     return 'font-size--1';\n        // }\n\n        return FontSizeLookup[size];\n    };\n\n    const classNames = classnames(`avenir-bold ${getFontSizeClass()}`, {\n        'text-theme-color-orange': color === 'orange',\n        'text-theme-color-blue': color === 'blue',\n    });\n\n    const style: React.CSSProperties =\n        customFontSize || customLineHeight\n            ? {\n                  fontSize: customFontSize || 'default',\n                  lineHeight: customLineHeight || 'default',\n              }\n            : null;\n\n    return (\n        <span className={classNames} style={style}>\n            {children}\n        </span>\n    );\n};\n\nconst InfoText: React.FC<Props> = ({ value, title, subtitle }: Props) => {\n    return (\n        <div className=\"trailer-quarter\">\n            <div>\n                <ThemeText color=\"blue\">{title}</ThemeText>\n            </div>\n            <div\n                style={{\n                    display: 'flex',\n                    alignItems: 'flex-start',\n                }}\n            >\n                <ThemeText color=\"orange\" size=\"large\" customLineHeight=\"1\">\n                    {value}\n                </ThemeText>\n\n                {subtitle ? (\n                    <div\n                        className=\"margin-left-quarter\"\n                        style={{\n                            lineHeight: '1',\n                        }}\n                    >\n                        <ThemeText\n                            color=\"orange\"\n                            size=\"small\"\n                            customLineHeight=\"1\"\n                        >\n                            {subtitle}\n                        </ThemeText>\n                    </div>\n                ) : null}\n            </div>\n        </div>\n    );\n};\n\nexport default InfoText;\n","import React from 'react';\n\nimport styled from 'styled-components';\nimport { ThemeText } from '../InfoPanel/InfoText';\nimport { SparklineLayerSwitcher } from '../';\n\nimport {\n    PANEL_BACKGROUND,\n    THEME_COLOR_BLUE,\n    BREAKPOINT_SMALL,\n} from '../../constants/style';\n\ntype Props = {\n    children: React.ReactNode;\n    infoBtnOnClick: () => void;\n};\n\nconst HeaderContainer = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    display: flex;\n    background: linear-gradient(\n        to bottom,\n        ${PANEL_BACKGROUND} 0%,\n        ${PANEL_BACKGROUND} 50%,\n        rgba(0, 0, 0, 0) 100%\n    );\n    z-index: 5;\n    box-sizing: border-box;\n    padding: 0.5rem 1rem;\n    justify-content: space-between;\n\n    svg {\n        fill: ${THEME_COLOR_BLUE};\n        stroke: ${THEME_COLOR_BLUE};\n    }\n`;\n\nconst AppTitle = styled.div`\n    margin-right: 0.5rem;\n\n    @media (max-width: 826px) {\n        display: none;\n    }\n`;\n\nconst SubTitle = styled.div`\n    margin: 0 0.5rem;\n    line-height: 1.2;\n\n    @media (max-width: 1113px) {\n        display: none;\n    }\n`;\n\nconst Title = ({ infoBtnOnClick }: { infoBtnOnClick: () => void }) => {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                alignItems: 'center',\n            }}\n        >\n            <AppTitle>\n                <ThemeText size=\"large\" color=\"orange\">\n                    UnemploymentPulse\n                </ThemeText>\n            </AppTitle>\n\n            <SubTitle\n                className=\"margin-left-1 margin-right-1\"\n                style={{\n                    lineHeight: '1.2',\n                }}\n            >\n                <ThemeText\n                    // size='large'\n                    color=\"blue\"\n                    customLineHeight=\"1\"\n                >\n                    14-Month US State and County\n                </ThemeText>\n\n                <br />\n\n                <ThemeText\n                    // size='large'\n                    color=\"blue\"\n                    customLineHeight=\"1\"\n                >\n                    Unemployment Trend Lines\n                </ThemeText>\n            </SubTitle>\n\n            <div\n                className=\"leader-quarter\"\n                style={{\n                    cursor: 'pointer',\n                }}\n                onClick={infoBtnOnClick}\n            >\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 24 24\"\n                    height=\"24\"\n                    width=\"24\"\n                >\n                    <path d=\"M12.5 7.5a1 1 0 1 1 1-1 1.002 1.002 0 0 1-1 1zM13 18V9h-2v1h1v8h-1v1h3v-1zm9.8-5.5A10.3 10.3 0 1 1 12.5 2.2a10.297 10.297 0 0 1 10.3 10.3zm-1 0a9.3 9.3 0 1 0-9.3 9.3 9.31 9.31 0 0 0 9.3-9.3z\" />\n                </svg>\n            </div>\n        </div>\n    );\n};\n\nconst Header: React.FC<Props> = ({ children, infoBtnOnClick }: Props) => {\n    return (\n        <HeaderContainer>\n            <Title infoBtnOnClick={infoBtnOnClick} />\n\n            {children}\n        </HeaderContainer>\n    );\n};\n\nexport default Header;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { THEME_COLOR_BLUE } from '../../constants/style';\n\nconst AboutContainer = styled.div`\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    z-index: 10;\n    background-color: rgba(3, 26, 57, 0.8);\n\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding: 2rem;\n    box-sizing: border-box;\n`;\n\nconst AboutContent = styled.div`\n    max-width: 500px;\n\n    svg {\n        stroke: ${THEME_COLOR_BLUE};\n        fill: ${THEME_COLOR_BLUE};\n    }\n`;\n\ntype Props = {\n    isActive: boolean;\n    onClose: () => void;\n};\n\nconst About: React.FC<Props> = ({ isActive, onClose }: Props) => {\n    return isActive ? (\n        <AboutContainer className=\"animate-fade-in\">\n            <AboutContent className=\"text-theme-color-blue avenir-demi\">\n                <div className=\"text-right cursor-pointer\" onClick={onClose}>\n                    <svg\n                        height=\"32\"\n                        width=\"32\"\n                        viewBox=\"0 0 32 32\"\n                        className=\"\"\n                    >\n                        <path d=\"M23.985 8.722L16.707 16l7.278 7.278-.707.707L16 16.707l-7.278 7.278-.707-.707L15.293 16 8.015 8.722l.707-.707L16 15.293l7.278-7.278z\" />\n                    </svg>\n                </div>\n\n                <p>\n                    <span className=\"text-theme-color-orange\">\n                        UnemploymentPulse\n                    </span>{' '}\n                    visualizes a moving 14-month window of unemployment data at\n                    the state and county level, as reported by the Bureau of\n                    Labor and Statistics. Local rates are shown alongside\n                    national rate.\n                </p>\n\n                <p>\n                    There are two options for visualizing these trends. The\n                    first shows local rates of unemployment alongside national\n                    rates, for context. The second option shows when local rates\n                    went above or below the national rate.\n                </p>\n\n                <p>\n                    UnemploymentPulse is a collaboration of architect{' '}\n                    <a\n                        rel=\"noreferrer\"\n                        href=\"https://github.com/vannizhang\"\n                        target=\"_blank\"\n                    >\n                        Jinnan Zhang\n                    </a>\n                    , demographer{' '}\n                    <a\n                        rel=\"noreferrer\"\n                        href=\"https://www.esri.com/arcgis-blog/author/dianaclavery_global/\"\n                        target=\"_blank\"\n                    >\n                        Diana Lavery\n                    </a>\n                    , and cartographer{' '}\n                    <a\n                        rel=\"noreferrer\"\n                        href=\"https://adventuresinmapping.com/\"\n                        target=\"_blank\"\n                    >\n                        John Nelson\n                    </a>\n                    , members of the Esri Living Atlas team. The Living Atlas is\n                    a repository of curated geographic data from all sectors of\n                    the mapping community. Find more BLS-related resources{' '}\n                    <a\n                        rel=\"noreferrer\"\n                        href=\"https://livingatlas.arcgis.com/en/browse/#d=2&q=Bureau%20of%20Labor%20Statistics\"\n                        target=\"_blank\"\n                    >\n                        here\n                    </a>\n                    .\n                </p>\n            </AboutContent>\n        </AboutContainer>\n    ) : null;\n};\n\nexport default About;\n","import React, { useMemo } from 'react';\n\nimport styled from 'styled-components';\nimport { UnempolymentData } from '../../../shared/types';\nimport InfoText, { ThemeText } from './InfoText';\nimport { numberFns } from 'helper-toolkit-ts';\nimport { SEPARATOR_COLOR } from '../../constants/style';\n\ntype Props = {\n    data: UnempolymentData;\n    // layout: InfoPanelLayout\n};\n\nconst SummaryInfoContainer = styled.div`\n    margin-right: 2rem;\n    width: 380px;\n`;\n\nconst SummaryInfo: React.FC<Props> = ({ data }: Props) => {\n    const participationRate = useMemo(() => {\n        return Math.floor(\n            ((data.attributes.workforce - data.attributes.unemployed) /\n                data.attributes.workforce) *\n                100\n        );\n    }, [data]);\n\n    return (\n        <SummaryInfoContainer>\n            <div className=\"trailer-half\">\n                <div>\n                    <ThemeText color=\"orange\" size=\"large\">\n                        {data.attributes.name}\n                    </ThemeText>\n                </div>\n\n                <div className=\"avenir-bold font-size-0\">\n                    <ThemeText color=\"orange\">\n                        {numberFns.numberWithCommas(data.attributes.population)}\n                    </ThemeText>{' '}\n                    <ThemeText>Total population</ThemeText>\n                </div>\n            </div>\n\n            <div\n                style={{\n                    display: 'flex',\n                }}\n            >\n                <div\n                    className=\"padding-right-1\"\n                    style={{\n                        borderRight: `1px solid ${SEPARATOR_COLOR}`,\n                    }}\n                >\n                    <InfoText\n                        title=\"Labor Force\"\n                        value={numberFns.numberWithCommas(\n                            data.attributes.workforce\n                        )}\n                    />\n\n                    <InfoText\n                        title=\"Participation Rate\"\n                        value={`${participationRate}%`}\n                    />\n                </div>\n\n                <div className=\"margin-left-1\">\n                    <InfoText\n                        title=\"Employed\"\n                        value={numberFns.numberWithCommas(\n                            data.attributes.workforce -\n                                data.attributes.unemployed\n                        )}\n                    />\n\n                    <InfoText\n                        title=\"Unemployed\"\n                        value={numberFns.numberWithCommas(\n                            data.attributes.unemployed\n                        )}\n                    />\n                </div>\n            </div>\n        </SummaryInfoContainer>\n    );\n};\n\nexport default SummaryInfo;\n","import React, { useContext, useMemo } from 'react';\n\nimport { UnempolymentData } from '../../../shared/types';\nimport InfoText, { ThemeText } from './InfoText';\n\nimport styled from 'styled-components';\nimport { numberFns } from 'helper-toolkit-ts';\nimport { SEPARATOR_COLOR, BREAKPOINT_SMALL } from '../../constants/style';\nimport { AppContext, AppContextValue } from '../../contexts/AppContextProvider';\n\nconst UnemploymentInfoContainer = styled.div`\n    margin-right: 4rem;\n\n    @media (max-width: ${BREAKPOINT_SMALL}px) {\n        margin-right: unset;\n        margin: 1rem 0;\n        padding: 1rem 0;\n        border-top: 1px solid ${SEPARATOR_COLOR};\n        border-bottom: 1px solid ${SEPARATOR_COLOR};\n    }\n`;\n\nconst UnemploymentRateTextWrap = styled.div`\n    line-height: 1.1;\n    margin-right: 2rem;\n\n    @media (max-width: ${BREAKPOINT_SMALL}px) {\n        margin-right: 0.75rem;\n    }\n`;\n\nconst StatisticsInfoContainer = styled.div`\n    display: flex;\n\n    @media (max-width: ${BREAKPOINT_SMALL}px) {\n        flex-wrap: wrap;\n    }\n`;\n\nconst InfoTextWrap = styled.div`\n    border-right: 1px solid ${SEPARATOR_COLOR};\n    min-width: 85px;\n    padding-right: 0.75rem;\n    margin-right: 1rem;\n\n    @media (max-width: ${BREAKPOINT_SMALL}px) {\n        border-right: none;\n        width: 45%;\n        padding-right: 0.25rem;\n        margin-right: 0.25rem;\n    }\n`;\n\ntype Props = {\n    data: UnempolymentData;\n    // layout: InfoPanelLayout\n};\n\ntype STATS_DATA = {\n    month: string;\n    value: number;\n};\n\nconst UnemploymentInfo: React.FC<Props> = ({ data }: Props) => {\n    const { months, isMobileDevice } = useContext<AppContextValue>(AppContext);\n\n    const [lastMonth, lastYear, lowest, highest] = useMemo(() => {\n        return getStatistics(data, months);\n    }, [data]);\n\n    return (\n        <UnemploymentInfoContainer>\n            <div>\n                <ThemeText>Unemployment Rate</ThemeText>\n            </div>\n\n            <div\n                style={{\n                    display: 'flex',\n                    marginBottom: isMobileDevice ? '1rem' : 'unset',\n                }}\n            >\n                <UnemploymentRateTextWrap>\n                    <div\n                        style={{\n                            display: 'flex',\n                        }}\n                    >\n                        <ThemeText\n                            color=\"orange\"\n                            customFontSize={isMobileDevice ? '5rem' : '7rem'}\n                        >\n                            {data.attributes.unemploymentRate}\n                        </ThemeText>\n\n                        <span className=\"leader-half\">\n                            <ThemeText\n                                color=\"orange\"\n                                customFontSize={\n                                    isMobileDevice ? '2rem' : '4rem'\n                                }\n                            >\n                                %\n                            </ThemeText>\n                        </span>\n                    </div>\n                </UnemploymentRateTextWrap>\n\n                <div\n                    style={{\n                        maxWidth: 170,\n                    }}\n                >\n                    <div\n                        style={{\n                            lineHeight: '1.2',\n                            marginTop: '.75rem',\n                            marginBottom: '.75rem',\n                        }}\n                    >\n                        {unemploymentCategory(data.attributes.unemploymentRate)}\n                    </div>\n\n                    <div\n                        style={{\n                            lineHeight: '1.2',\n                        }}\n                    >\n                        <ThemeText customLineHeight=\"1\">\n                            Ranks #\n                            {numberFns.numberWithCommas(data.attributes.rank)}\n                        </ThemeText>\n                        <br />\n                        <ThemeText customLineHeight=\"1\">\n                            {data.attributes.fips.length === 2\n                                ? 'of 50 States and DC'\n                                : 'of 3,141 Counties'}\n                        </ThemeText>\n                    </div>\n                </div>\n            </div>\n\n            <StatisticsInfoContainer>\n                <InfoTextWrap>\n                    <InfoText\n                        title=\"Last Month\"\n                        value={lastMonth.value.toString()}\n                    />\n                </InfoTextWrap>\n\n                <InfoTextWrap>\n                    <InfoText\n                        title=\"Last Year\"\n                        value={lastYear.value.toString()}\n                    />\n                </InfoTextWrap>\n\n                <InfoTextWrap>\n                    <InfoText\n                        title=\"14-Month HIGH\"\n                        subtitle={highest.month}\n                        value={highest.value.toString()}\n                    />\n                </InfoTextWrap>\n\n                <InfoText\n                    title=\"14-Month LOW\"\n                    subtitle={lowest.month}\n                    value={lowest.value.toString()}\n                />\n            </StatisticsInfoContainer>\n        </UnemploymentInfoContainer>\n    );\n};\n\nconst getStatistics = (\n    data: UnempolymentData,\n    months: string[]\n): STATS_DATA[] => {\n    const { PctUnemployed } = data;\n\n    const idx4lastMonth = PctUnemployed.length - 2;\n    // last year this month\n    const idx4LastYear = PctUnemployed.length - 13;\n    // 14 month low\n    let index4LowesetMonth = 0;\n    // 14 month high\n    let idx4highestMonth = 0;\n\n    for (let i = 0; i < PctUnemployed.length; i++) {\n        if (PctUnemployed[i] > PctUnemployed[idx4highestMonth]) {\n            idx4highestMonth = i;\n        }\n\n        if (PctUnemployed[i] < PctUnemployed[index4LowesetMonth]) {\n            index4LowesetMonth = i;\n        }\n    }\n\n    return [\n        idx4lastMonth,\n        idx4LastYear,\n        index4LowesetMonth,\n        idx4highestMonth,\n    ].map((idx) => {\n        const value = PctUnemployed[idx];\n        const [month, year] = months[idx].split(' ');\n        const formatedMonth = `${month.slice(0, 3).toUpperCase()} '${year.slice(\n            2\n        )}`;\n\n        return {\n            month: formatedMonth,\n            value,\n        };\n    });\n};\n\nconst unemploymentCategory = (rate: number): React.ReactNode => {\n    if (rate < 4) {\n        return (\n            <>\n                <ThemeText customLineHeight=\"1\">Indicative of an</ThemeText>\n                <br />\n                <ThemeText customLineHeight=\"1\">Economic Boom</ThemeText>\n            </>\n        );\n    }\n\n    if (rate < 6) {\n        return (\n            <>\n                <ThemeText customLineHeight=\"1\">Healthy Levels</ThemeText>\n                <br />\n                <ThemeText customLineHeight=\"1\">of Employment</ThemeText>\n            </>\n        );\n    }\n\n    return (\n        <>\n            <ThemeText customLineHeight=\"1\">Recession Level</ThemeText>\n            <br />\n            <ThemeText customLineHeight=\"1\">Unemployment</ThemeText>\n        </>\n    );\n};\n\nexport default UnemploymentInfo;\n","import {\n    THEME_COLOR_BLUE,\n    THEME_COLOR_ORANGE,\n    SEPARATOR_COLOR,\n    PANEL_BACKGROUND,\n} from '../../constants/style';\n\nexport const MARGIN = {\n    top: 15,\n    right: 15,\n    bottom: 25,\n    left: 30,\n};\n\n// The inner padding determines the ratio of the range that is reserved for blank space between bands. must be within [0, 1]\nexport const SCALE_BAND_PADDING_INNER = 0.9;\n\nexport const BAR_COLOR = THEME_COLOR_ORANGE;\n\nexport const LINE_COLOR = THEME_COLOR_BLUE;\nexport const LINE_WIDTH = 2;\n\nexport const REF_LINE_COLOR = SEPARATOR_COLOR;\nexport const REF_LINE_STROKE = 0.5;\n\nexport const TOOLTIP_BACKGROUND_COLOR = PANEL_BACKGROUND;\nexport const TOOLTIP_TEXT_COLOR = '#fff';\nexport const TOOLTIP_BOXSHADOW_COLOR = '#rgba(0,0,0,.25)';\nexport const TOOLTIP_PADDING = '.5rem';\n\nexport const AXIS_TEXT_COLOR = THEME_COLOR_BLUE;\nexport const AXIS_LINE_COLOR = SEPARATOR_COLOR;\n","import React, { useRef, useEffect } from 'react';\n\nimport { select, ScaleBand, ScaleLinear } from 'd3';\n\nimport { BAR_COLOR } from '../constants';\n\nimport { QuickD3ChartData, SvgContainerData } from '../types';\n\ntype Props = {\n    xScale: ScaleBand<string | number>;\n    yScale: ScaleLinear<number, number>;\n    svgContainerData?: SvgContainerData;\n    data: QuickD3ChartData;\n    color?: string;\n};\n\nconst Bars: React.FC<Props> = ({\n    xScale,\n    yScale,\n    data,\n    svgContainerData,\n    color,\n}: Props) => {\n    const barsGroup = useRef<SVGGElement>();\n\n    const draw = () => {\n        const { dimension } = svgContainerData;\n\n        const { height } = dimension;\n\n        const existingBars = select(barsGroup.current).selectAll('rect');\n\n        if (existingBars.size()) {\n            existingBars.remove();\n        }\n\n        select(barsGroup.current)\n            .selectAll(`rect`)\n            .data(data)\n            .enter()\n            .append('rect')\n            .style('fill', color || BAR_COLOR)\n            .attr('x', (d) => xScale(d.key))\n            .attr('width', xScale.bandwidth())\n            .attr('y', (d) => yScale(d.value))\n            .attr('height', (d) => {\n                return height - yScale(d.value);\n            });\n    };\n\n    useEffect(() => {\n        if (svgContainerData && xScale && yScale && data) {\n            draw();\n        }\n    }, [xScale, yScale, data]);\n\n    return <g ref={barsGroup} className=\"bar-group\"></g>;\n};\n\nexport default Bars;\n","import React, { useEffect, useMemo } from 'react';\nimport {\n    select,\n    line,\n    ScaleBand,\n    ScaleLinear,\n    ScaleTime,\n    curveMonotoneX,\n} from 'd3';\n\nimport {\n    QuickD3ChartData,\n    QuickD3ChartDataItem,\n    SvgContainerData,\n} from '../types';\n\nimport { LINE_COLOR, LINE_WIDTH } from '../constants';\n\ntype Props = {\n    xScale:\n        | ScaleBand<string | number>\n        | ScaleTime<number, number>\n        | ScaleLinear<number, number>;\n    yScale: ScaleLinear<number, number>;\n    svgContainerData?: SvgContainerData;\n    data: QuickD3ChartData;\n    color?: string;\n    width?: number;\n};\n\nconst Line: React.FC<Props> = ({\n    xScale,\n    yScale,\n    data,\n    svgContainerData,\n    color,\n    width,\n}: Props) => {\n    const lineGroup = React.useRef<SVGGElement>();\n\n    // set offset if typeof xScale is ScaleBand\n    const xOffset = useMemo(() => {\n        return 'bandwidth' in xScale ? xScale.bandwidth() / 2 : 0;\n    }, [xScale]);\n\n    const valueline = useMemo(() => {\n        return line<QuickD3ChartDataItem>()\n            .curve(curveMonotoneX)\n            .x((d) => {\n                return 'bandwidth' in xScale\n                    ? xScale(d.key) + xOffset\n                    : xScale(+d.key);\n            })\n            .y((d) => yScale(d.value));\n    }, [xScale, yScale]);\n\n    const draw = () => {\n        remove();\n\n        select(lineGroup.current)\n            .append('path')\n            .data([data])\n            .attr('d', valueline)\n            .style('fill', 'none')\n            .style('stroke', color || LINE_COLOR)\n            .style('stroke-width', width || LINE_WIDTH);\n    };\n\n    const remove = () => {\n        const lines = select(lineGroup.current).selectAll('path');\n\n        // check the number of existing lines, if greater than 0; remove all existing ones\n        if (lines.size()) {\n            lines.remove().exit();\n        }\n    };\n\n    useEffect(() => {\n        if (svgContainerData && xScale && yScale && data) {\n            draw();\n        }\n    }, [xScale, yScale, data]);\n\n    return <g ref={lineGroup} className=\"line-group\"></g>;\n};\n\nexport default Line;\n","import React, { useRef, useEffect } from 'react';\n\nimport { select, mouse, ScaleBand, ScaleLinear, ScaleTime } from 'd3';\n\nimport { SvgContainerData } from '../types';\n\nimport { REF_LINE_COLOR, REF_LINE_STROKE } from '../constants';\n\nexport type PointerPositionOnHover = {\n    // index of the item on hover\n    index4ItemOnHover: number;\n    // position on x axis for the item on hover\n    xPosition: number;\n};\n\ntype Props = {\n    xScale:\n        | ScaleBand<string | number>\n        | ScaleLinear<number, number>\n        | ScaleTime<number, number>;\n    xDomain?: (string | number)[];\n    svgContainerData?: SvgContainerData;\n    onHover?: (data: PointerPositionOnHover) => void;\n};\n\nconst PointerEventsOverlay: React.FC<Props> = ({\n    xScale,\n    xDomain,\n    svgContainerData,\n    onHover,\n}: Props) => {\n    const containerG = useRef<SVGGElement>();\n\n    const itemOnHover = useRef<PointerPositionOnHover>();\n\n    const initRefLine = () => {\n        const { dimension } = svgContainerData;\n\n        const { height } = dimension;\n\n        const container = select(containerG.current);\n\n        const refLine = container.selectAll('line');\n\n        if (!refLine.size()) {\n            container\n                .append('line')\n                .attr('x1', 0)\n                .attr('y1', 0)\n                .attr('x2', 0)\n                .attr('y2', height)\n                .style('opacity', 0)\n                .attr('stroke-width', REF_LINE_STROKE)\n                .attr('stroke', REF_LINE_COLOR)\n                .style('fill', 'none');\n        }\n    };\n\n    const initOverlayRect = () => {\n        const { dimension } = svgContainerData;\n\n        const { height, width } = dimension;\n\n        const container = select(containerG.current);\n\n        container.selectAll('rect').remove();\n\n        container\n            .append('rect')\n            // .attr(\"class\", ClassNames.BackgroundRect)\n            .attr('width', width)\n            .attr('height', height)\n            .attr('fill', 'rgba(0,0,0,0)')\n            .on('mouseleave', () => {\n                setDataOnHover(null);\n            })\n            .on('mousemove', function () {\n                const mousePosX = mouse(this)[0];\n                // console.log(mousePosX)\n                setDataOnHover(getDataByMousePos(mousePosX));\n            });\n    };\n\n    const setDataOnHover = (data?: PointerPositionOnHover) => {\n        itemOnHover.current = data;\n        updateVerticalRefLinePos();\n        onHover(data);\n    };\n\n    const updateVerticalRefLinePos = (): void => {\n        const vRefLine = select(containerG.current).select('line');\n\n        const opacity = itemOnHover.current ? 1 : 0;\n\n        const xPos: number = itemOnHover.current\n            ? itemOnHover.current.xPosition\n            : 0;\n\n        vRefLine.attr('x1', xPos).attr('x2', xPos).style('opacity', opacity);\n    };\n\n    const getDataByMousePos = (mousePosX: number): PointerPositionOnHover => {\n        const { dimension } = svgContainerData;\n\n        const { width } = dimension;\n\n        // set offset if typeof xScale is ScaleBand\n        const offset = 'bandwidth' in xScale ? xScale.bandwidth() / 2 : 0;\n\n        // when pointer at left half of first bar OR at right half of last bar\n        if (mousePosX < offset || mousePosX > width - offset) {\n            const index = mousePosX < offset ? 0 : xDomain.length - 1;\n\n            const value = xDomain[index];\n\n            const xPosition =\n                'bandwidth' in xScale ? xScale(value) + offset : xScale(+value);\n\n            return {\n                index4ItemOnHover: index,\n                xPosition,\n            };\n        }\n\n        let itemIndex = -1;\n        let xPosition = 0;\n\n        for (let i = 0, len = xDomain.length; i < len; i++) {\n            const currItem = xDomain[i];\n            const currItemPos =\n                'bandwidth' in xScale\n                    ? xScale(currItem) + offset\n                    : xScale(+currItem);\n\n            const nextItemIndex = xDomain[i + 1] ? i + 1 : i;\n            const nextItem = xDomain[nextItemIndex];\n            const nextItemPos =\n                'bandwidth' in xScale\n                    ? xScale(nextItem) + offset\n                    : xScale(+nextItem);\n\n            if (mousePosX >= currItemPos && mousePosX <= nextItemPos) {\n                const distToCurrItem = Math.abs(mousePosX - currItemPos);\n                const distToNextItem = Math.abs(mousePosX - nextItemPos);\n\n                itemIndex = distToCurrItem < distToNextItem ? i : nextItemIndex;\n\n                xPosition =\n                    distToCurrItem < distToNextItem ? currItemPos : nextItemPos;\n\n                break;\n            }\n        }\n\n        return {\n            index4ItemOnHover: itemIndex,\n            xPosition,\n        };\n    };\n\n    useEffect(() => {\n        if (svgContainerData) {\n            initRefLine();\n            initOverlayRect();\n        }\n    }, [svgContainerData]);\n\n    return <g className=\"pointer-event-overlay-group\" ref={containerG} />;\n};\n\nexport default PointerEventsOverlay;\n","import React, { useRef, useEffect, useLayoutEffect } from 'react';\n\nimport { select } from 'd3';\n\nimport { SvgContainerData, Margin, Dimension } from '../types';\n\nimport { MARGIN } from '../constants';\n\ntype Props = {\n    margin?: Margin;\n    resizable?: boolean;\n    dimensionOnChange?: (dimension: Dimension) => void;\n    children: React.ReactNode;\n};\n\nconst SvgContainer: React.FC<Props> = ({\n    margin = MARGIN,\n    resizable,\n    dimensionOnChange,\n    children,\n}: Props) => {\n    const containerRef = useRef<HTMLDivElement>();\n    const svgRef = useRef<SVGSVGElement>();\n    const rootGroupRef = useRef<SVGGElement>();\n    const dimensionRef = useRef<Dimension>();\n\n    const [svgContainerData, setSvgContainerData] = React.useState<\n        SvgContainerData\n    >();\n\n    const updateDimension = () => {\n        const svg = select(svgRef.current).node();\n        const rootGroup = select(rootGroupRef.current).node();\n\n        const container = containerRef.current;\n        const width = container.offsetWidth - margin.left - margin.right;\n        const height = container.offsetHeight - margin.top - margin.bottom;\n\n        dimensionRef.current = {\n            height,\n            width,\n        };\n\n        if (dimensionOnChange) {\n            dimensionOnChange(dimensionRef.current);\n        }\n\n        setSvgContainerData({\n            svg,\n            rootGroup,\n            margin,\n            dimension: dimensionRef.current,\n        });\n    };\n\n    useEffect(() => {\n        updateDimension();\n    }, []);\n\n    useLayoutEffect(() => {\n        if (resizable) {\n            window.addEventListener('resize', updateDimension);\n        }\n\n        return () => {\n            window.removeEventListener('resize', updateDimension);\n        };\n    }, []);\n\n    return (\n        <div\n            ref={containerRef}\n            style={{\n                position: 'relative',\n                width: '100%',\n                height: '100%',\n            }}\n        >\n            <svg\n                ref={svgRef}\n                style={{\n                    width: '100%',\n                    height: '100%',\n                }}\n            >\n                <g\n                    ref={rootGroupRef}\n                    style={{\n                        transform: `translate(${margin.left}px, ${margin.top}px)`,\n                    }}\n                >\n                    {svgContainerData\n                        ? React.Children.map(children, (child) => {\n                              return React.cloneElement(\n                                  child as React.ReactElement<any>,\n                                  {\n                                      svgContainerData,\n                                  }\n                              );\n                          })\n                        : null}\n                </g>\n            </svg>\n        </div>\n    );\n};\n\nexport default SvgContainer;\n","import React, { useEffect } from 'react';\nimport { QuickD3ChartData, Dimension, Margin } from '../types';\nimport { PointerPositionOnHover } from './PointerEventsOverlay';\nimport {\n    MARGIN,\n    // TOOLTIP_BACKGROUND_COLOR,\n    // TOOLTIP_TEXT_COLOR,\n    TOOLTIP_BOXSHADOW_COLOR,\n    // TOOLTIP_PADDING\n} from '../constants';\n\nimport { TooltipContent } from './';\n\ntype Props = {\n    dimension: Dimension;\n    pointerPosition?: PointerPositionOnHover;\n    data4Bars?: QuickD3ChartData;\n    data4Line?: QuickD3ChartData;\n    margin?: Margin;\n};\n\ntype TooltipPos = {\n    top: number;\n    left: number;\n};\n\nconst Tooltip: React.FC<Props> = ({\n    dimension,\n    pointerPosition,\n    data4Bars,\n    data4Line,\n    margin = MARGIN,\n}: Props) => {\n    const tooltipRef = React.useRef<HTMLDivElement>();\n\n    const [tooltipPos, setTooltipPos] = React.useState<TooltipPos>({\n        top: 0,\n        left: 0,\n    });\n\n    const updateTooltipPosition = () => {\n        const tooltipDiv = tooltipRef.current;\n\n        if (!tooltipDiv) {\n            return;\n        }\n\n        const { width } = dimension;\n\n        const tooltipDivWidth = tooltipDiv.offsetWidth;\n        const tooltipDivHeight = tooltipDiv.offsetHeight;\n\n        const top = -(tooltipDivHeight - margin.top);\n        const xPosForItemOnHover = pointerPosition.xPosition + margin.left;\n\n        let left =\n            xPosForItemOnHover + tooltipDivWidth / 2 >= width + margin.left\n                ? xPosForItemOnHover - tooltipDivWidth\n                : xPosForItemOnHover - tooltipDivWidth / 2;\n\n        left = left >= margin.left ? left : margin.left;\n\n        setTooltipPos({\n            top,\n            left,\n        });\n    };\n\n    useEffect(() => {\n        if (pointerPosition) {\n            updateTooltipPosition();\n        }\n    }, [pointerPosition]);\n\n    return (\n        <div\n            ref={tooltipRef}\n            style={{\n                display: pointerPosition ? 'block' : 'none',\n                position: 'absolute',\n                left: `${tooltipPos.left}px`,\n                top: `${tooltipPos.top}px`,\n                pointerEvents: 'none',\n                boxSizing: 'border-box',\n                boxShadow: `0 0 10px 2px ${TOOLTIP_BOXSHADOW_COLOR}`,\n                zIndex: 5,\n            }}\n        >\n            <TooltipContent\n                index4ItemOnHover={\n                    pointerPosition ? pointerPosition.index4ItemOnHover : -1\n                }\n                barDataOnHover={\n                    pointerPosition && data4Bars\n                        ? data4Bars[pointerPosition.index4ItemOnHover]\n                        : undefined\n                }\n                lineDataOnHover={\n                    pointerPosition && data4Line\n                        ? data4Line[pointerPosition.index4ItemOnHover]\n                        : undefined\n                }\n            />\n        </div>\n    );\n};\n\nexport default Tooltip;\n","import React from 'react';\n\nimport {\n    TOOLTIP_BACKGROUND_COLOR,\n    TOOLTIP_TEXT_COLOR,\n    TOOLTIP_PADDING,\n} from '../constants';\nimport { QuickD3ChartDataItem } from '../types';\n\ntype Props = {\n    index4ItemOnHover?: number;\n    barDataOnHover?: QuickD3ChartDataItem;\n    lineDataOnHover?: QuickD3ChartDataItem;\n};\n\nconst TooltipContent: React.FC<Props> = ({\n    index4ItemOnHover,\n    barDataOnHover,\n    lineDataOnHover,\n}: Props) => {\n    return (\n        <div\n            className=\"font-size--1 avenir-bold\"\n            style={{\n                padding: TOOLTIP_PADDING,\n                background: TOOLTIP_BACKGROUND_COLOR,\n                color: TOOLTIP_TEXT_COLOR,\n            }}\n        >\n            <div>\n                {/* <span>{ barDataOnHover ? barDataOnHover.key : '' }</span>\n                <br /> */}\n                <span className=\"text-theme-color-orange\">\n                    Local: {barDataOnHover ? barDataOnHover.value : 'n/a'}%\n                </span>\n                <br />\n                <span className=\"text-theme-color-blue\">\n                    National: {lineDataOnHover ? lineDataOnHover.value : 'n/a'}%\n                </span>\n            </div>\n        </div>\n    );\n};\n\nexport default TooltipContent;\n","import React, { useContext, useEffect } from 'react';\n\nimport { select, axisBottom, timeFormat, AxisScale } from 'd3';\n\nimport { SvgContainerData } from '../types';\n\nimport { AXIS_TEXT_COLOR, AXIS_LINE_COLOR } from '../constants';\nimport {\n    AppContextValue,\n    AppContext,\n} from '../../../contexts/AppContextProvider';\n\ntype Props = {\n    scale: AxisScale<string | number>;\n    svgContainerData?: SvgContainerData;\n    tickValues?: (string | number)[];\n    timeFormatSpecifier?: string;\n};\n\nconst YAxis: React.FC<Props> = ({\n    scale,\n    svgContainerData,\n    tickValues,\n    timeFormatSpecifier,\n}: Props) => {\n    // const containerGroup = useRef<SVGGElement>();\n\n    const { months } = useContext<AppContextValue>(AppContext);\n\n    const formatTime = timeFormatSpecifier\n        ? timeFormat(timeFormatSpecifier)\n        : null;\n\n    const drawXAxis = () => {\n        const { rootGroup, dimension } = svgContainerData;\n\n        const { height } = dimension;\n\n        let xAxisGenerator = null;\n\n        xAxisGenerator = axisBottom(scale);\n\n        if (tickValues) {\n            xAxisGenerator.tickValues(tickValues);\n        }\n\n        if (formatTime) {\n            xAxisGenerator.tickFormat((d: number) => {\n                const date = new Date(+d);\n                return formatTime(date);\n            });\n        }\n\n        xAxisGenerator.tickFormat((d) => {\n            const [month, year] = months[d].split(' ');\n            const abbreviation = month.slice(0, 3);\n            const formated = abbreviation === 'Jan' ? year : abbreviation;\n            return formated;\n        });\n\n        const xAxisLabel = select(rootGroup).selectAll('.x.axis');\n\n        if (!xAxisLabel.size()) {\n            select(rootGroup)\n                .append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0,${height})`)\n                .call(xAxisGenerator);\n\n            const xAxisG = select(rootGroup).select('.x.axis');\n\n            xAxisG\n                .selectAll('.domain, .tick line')\n                .attr('stroke', AXIS_LINE_COLOR);\n\n            xAxisG.selectAll('.tick text').style('fill', AXIS_TEXT_COLOR);\n        } else {\n            xAxisLabel\n                .attr('transform', `translate(0,${height})`)\n                .call(xAxisGenerator);\n        }\n    };\n\n    useEffect(() => {\n        if (svgContainerData) {\n            drawXAxis();\n        }\n    }, [scale, svgContainerData]);\n\n    return null;\n};\n\nexport default YAxis;\n","import React, { useEffect } from 'react';\n\nimport { select, axisLeft, AxisScale } from 'd3';\n\nimport { SvgContainerData } from '../types';\n\nimport { AXIS_TEXT_COLOR, AXIS_LINE_COLOR } from '../constants';\n\ntype Props = {\n    scale: AxisScale<number>;\n    svgContainerData?: SvgContainerData;\n};\n\nconst XAxis: React.FC<Props> = ({ scale, svgContainerData }: Props) => {\n    const drawYAxis = () => {\n        const { rootGroup } = svgContainerData;\n\n        // const { width } = dimension;\n\n        const yAxis = axisLeft(scale)\n            .ticks(3)\n            // .tickSizeInner(-width)\n            .tickPadding(5);\n\n        const yAxisLabel = select(rootGroup).selectAll('.y.axis');\n\n        if (!yAxisLabel.size()) {\n            select(rootGroup).append('g').attr('class', 'y axis').call(yAxis);\n\n            const yAxisG = select(rootGroup).select('.y.axis');\n\n            yAxisG\n                .selectAll('.domain, .tick line')\n                .attr('stroke', AXIS_LINE_COLOR);\n\n            yAxisG.selectAll('.tick text').style('fill', AXIS_TEXT_COLOR);\n        } else {\n            yAxisLabel.call(yAxis);\n        }\n    };\n\n    useEffect(() => {\n        if (svgContainerData) {\n            drawYAxis();\n        }\n    }, [scale, svgContainerData]);\n\n    return null;\n};\n\nexport default XAxis;\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\n\nimport {\n    ScaleBand,\n    scaleLinear,\n    scaleTime,\n    ScaleLinear,\n    ScaleTime,\n    AxisScale,\n    scaleBand,\n    max,\n    min,\n} from 'd3';\n\nimport {\n    // SvgContainerData,\n    Dimension,\n    Margin,\n} from '../types';\n\nimport {\n    SvgContainer,\n    Bars,\n    Line,\n    XAxis,\n    YAxis,\n    PointerEventsOverlay,\n    Tooltip,\n} from '../elements';\n\nimport { PointerPositionOnHover } from '../elements/PointerEventsOverlay';\n\nimport {\n    QuickD3ChartData,\n    // QuickD3ChartDataItem\n} from '../types';\nimport { SCALE_BAND_PADDING_INNER } from '../constants';\n\ntype XScale =\n    | ScaleBand<string | number>\n    | ScaleTime<number, number>\n    | ScaleLinear<number, number>;\ntype YScale = ScaleLinear<number, number>;\n\ntype Props = {\n    data4Bars?: QuickD3ChartData;\n    data4Line?: QuickD3ChartData;\n    barColor?: string;\n    lineColor?: string;\n    lineWidth?: number;\n    margin?: Margin;\n    timeFormatSpecifier?: string;\n    //if specified, use list of tick values for x axis\n    // xScaleTickValues?: (string | number)[];\n    // specify this value to show only 1 in every n ticks on x axis so it won't be crowded\n    numOfTicksOnXAxisToHide?: number;\n    resizable?: boolean;\n};\n\nconst BarLineCombined: React.FC<Props> = ({\n    data4Bars = [],\n    data4Line = [],\n    barColor,\n    lineColor,\n    lineWidth,\n    margin,\n    timeFormatSpecifier,\n    // xScaleTickValues,\n    numOfTicksOnXAxisToHide,\n    resizable = true,\n}: Props) => {\n    const [dimension, setDimension] = useState<Dimension>({\n        height: 0,\n        width: 0,\n    });\n\n    const [pointerPositionOnHover, setPointerPositionOnHover] = useState<\n        PointerPositionOnHover\n    >();\n\n    const xDomain = useMemo(() => {\n        if (!data4Bars.length && !data4Line.length) {\n            return [];\n        }\n\n        const data =\n            data4Bars && data4Bars.length ? [...data4Bars] : [...data4Line];\n\n        return data.map((d) => {\n            return typeof d.key === 'number' ? d.key.toString() : d.key;\n        });\n    }, [data4Bars, data4Line]);\n\n    const xScale = useMemo((): XScale => {\n        const { width } = dimension;\n\n        if (data4Bars && data4Bars.length) {\n            return scaleBand()\n                .paddingInner(SCALE_BAND_PADDING_INNER)\n                .range([0, width])\n                .domain(xDomain);\n        }\n\n        const xmin = +data4Line[0].key;\n        const xmax = max(data4Line, (d) => +d.key);\n\n        const xScale = timeFormatSpecifier\n            ? scaleTime().range([0, width]).domain([xmin, xmax])\n            : scaleLinear().range([0, width]).domain([xmin, xmax]);\n\n        return xScale;\n    }, [dimension, xDomain]);\n\n    const yScale = useMemo((): YScale => {\n        const { height } = dimension;\n\n        const ymax4Bars =\n            data4Bars && data4Bars.length ? max(data4Bars, (d) => d.value) : 0;\n\n        // const ymin4Bars = data4Bars && data4Bars.length\n        //     ? min(data4Bars, d=>d.value)\n        //     : undefined;\n\n        const ymax4Lines =\n            data4Line && data4Line.length\n                ? max(data4Line, (d) => d.value)\n                : undefined;\n\n        // const ymin4Lines = data4Line && data4Line.length\n        //     ? min(data4Line, d=>d.value)\n        //     : undefined;\n\n        const ymax = max([ymax4Bars, ymax4Lines]);\n\n        const ymin = 0;\n        // const ymin = min([ymin4Bars, ymin4Lines])\n\n        return scaleLinear<number, number>()\n            .range([height, 0])\n            .domain([ymin, ymax]);\n    }, [dimension, data4Bars, data4Line]);\n\n    const xScaleTickValues = useMemo(() => {\n        if (!numOfTicksOnXAxisToHide || numOfTicksOnXAxisToHide <= 1) {\n            return undefined;\n        }\n\n        return data4Bars\n            .map((d) => d.key)\n            .filter((d, i) => {\n                return !(i % numOfTicksOnXAxisToHide);\n            });\n    }, [data4Bars]);\n\n    return (\n        <div\n            style={{\n                position: 'relative',\n                width: '100%',\n                height: '100%',\n                boxSizing: 'border-box',\n            }}\n        >\n            <SvgContainer\n                margin={margin}\n                resizable={resizable}\n                dimensionOnChange={setDimension}\n            >\n                {data4Bars && data4Bars.length ? (\n                    <Bars\n                        data={data4Bars}\n                        xScale={xScale as ScaleBand<string | number>}\n                        yScale={yScale}\n                        color={barColor}\n                    />\n                ) : (\n                    <></>\n                )}\n\n                {data4Line && data4Line.length ? (\n                    <Line\n                        data={data4Line}\n                        xScale={xScale}\n                        yScale={yScale}\n                        color={lineColor}\n                        width={lineWidth}\n                    />\n                ) : (\n                    <></>\n                )}\n\n                <XAxis\n                    scale={xScale as AxisScale<string | number>}\n                    timeFormatSpecifier={timeFormatSpecifier}\n                    tickValues={xScaleTickValues}\n                />\n\n                <YAxis scale={yScale} />\n\n                <PointerEventsOverlay\n                    xDomain={xDomain}\n                    xScale={xScale}\n                    onHover={setPointerPositionOnHover}\n                />\n            </SvgContainer>\n\n            <Tooltip\n                pointerPosition={pointerPositionOnHover}\n                dimension={dimension}\n                data4Bars={data4Bars}\n                data4Line={data4Line}\n                margin={margin}\n            />\n        </div>\n    );\n};\n\nexport default BarLineCombined;\n","import React, { useContext, useMemo } from 'react';\nimport { UnempolymentData } from '../../../shared/types';\nimport { AppContext, AppContextValue } from '../../contexts/AppContextProvider';\n\nimport { BarLineCombined } from '../QuickD3Chart';\n\nimport { QuickD3ChartData, QuickD3ChartDataItem } from '../QuickD3Chart/types';\nimport { ThemeText } from './InfoText';\n\ntype Props = {\n    data: UnempolymentData;\n};\n\nconst getChartData = (values: number[], months: string[]) => {\n    return values.map((value, index) => {\n        return {\n            key: index,\n            value,\n        };\n    });\n};\n\nconst Chart: React.FC<Props> = ({ data }: Props) => {\n    const { unemploymentDataByFIPS, months } = useContext<AppContextValue>(\n        AppContext\n    );\n\n    const data4Line: QuickD3ChartData = useMemo(() => {\n        const USData = unemploymentDataByFIPS['0'];\n        const { PctUnemployed } = USData;\n        return getChartData(PctUnemployed, months);\n    }, [unemploymentDataByFIPS]);\n\n    const data4Bars: QuickD3ChartData = useMemo(() => {\n        const { PctUnemployed } = data;\n        return getChartData(PctUnemployed, months);\n    }, [data]);\n\n    return (\n        <div\n            style={{\n                position: 'relative',\n                flexGrow: 1,\n            }}\n        >\n            <div\n                className=\"text-right\"\n                style={{\n                    position: 'absolute',\n                    top: '.75rem',\n                    right: '1rem',\n                }}\n            >\n                <ThemeText color=\"orange\" size=\"small\">\n                    Local Unemployment\n                </ThemeText>\n                <br />\n                <ThemeText color=\"blue\" size=\"small\">\n                    National Unemployment\n                </ThemeText>\n                <br />\n                <ThemeText color=\"blue\">\n                    {data4Line ? data4Line[data4Line.length - 1].value : ''}%\n                </ThemeText>\n            </div>\n            <BarLineCombined data4Bars={data4Bars} data4Line={data4Line} />\n        </div>\n    );\n};\n\nexport default Chart;\n","import React from 'react';\n\nimport styled from 'styled-components';\nimport { UnempolymentData } from '../../../shared/types';\n\nimport SummaryInfo from './SummaryInfo';\nimport UnemploymentInfo from './UnemploymentInfo';\nimport Chart from './Chart';\n\nimport {\n    PANEL_BACKGROUND,\n    THEME_COLOR_BLUE,\n    BREAKPOINT_SMALL,\n} from '../../constants/style';\n\nconst InfoPanelContainer = styled.div`\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    height: 250px;\n    display: flex;\n    box-sizing: border-box;\n    background: linear-gradient(\n        to top,\n        ${PANEL_BACKGROUND} 0%,\n        ${PANEL_BACKGROUND} 80%,\n        rgba(0, 0, 0, 0) 100%\n    );\n    padding: 1rem 2rem;\n    /* box-shadow: 0 0 10px 2px #156aa4; */\n    z-index: 5;\n\n    @media (max-width: ${BREAKPOINT_SMALL}px) {\n        top: 0;\n        bottom: 0;\n        height: unset;\n        flex-direction: column;\n        overflow-y: auto;\n\n        background: ${PANEL_BACKGROUND};\n    }\n`;\n\nconst CloseBtnDiv = styled.div`\n    position: absolute;\n    top: 0.5rem;\n    right: 0.5rem;\n    cursor: pointer;\n\n    svg {\n        stroke: ${THEME_COLOR_BLUE};\n        fill: ${THEME_COLOR_BLUE};\n    }\n`;\n\ntype Props = {\n    data: UnempolymentData;\n    close: () => void;\n    // layout: InfoPanelLayout\n};\n\nconst InfoPanel: React.FC<Props> = ({ data, close }: Props) => {\n    return data ? (\n        <InfoPanelContainer className=\"animate-fade-in\">\n            <SummaryInfo data={data} />\n            <UnemploymentInfo data={data} />\n            <Chart data={data} />\n\n            <CloseBtnDiv onClick={close}>\n                <svg height=\"32\" width=\"32\" viewBox=\"0 0 32 32\" className=\"\">\n                    <path d=\"M23.985 8.722L16.707 16l7.278 7.278-.707.707L16 16.707l-7.278 7.278-.707-.707L15.293 16 8.015 8.722l.707-.707L16 15.293l7.278-7.278z\" />\n                </svg>\n            </CloseBtnDiv>\n        </InfoPanelContainer>\n    ) : null;\n};\n\nexport default InfoPanel;\n","import React, { useState, useEffect } from 'react';\n\nimport { loadModules } from 'esri-loader';\nimport IMapView from 'esri/views/MapView';\nimport IGraphic from 'esri/Graphic';\nimport IGraphicsLayer from 'esri/layers/GraphicsLayer';\nimport ISimpleFillSymbol from 'esri/symbols/SimpleFillSymbol';\nimport IPolygon from 'esri/geometry/Polygon';\nimport {\n    SPARKLINE_COLOR_ORANGE,\n    THEME_COLOR_ORANGE,\n} from '../../constants/style';\n// import IPoint from 'esri/geometry/Point';\n// import IGraphicsLayer from 'esri/layers/GraphicsLayer';\n// import IwatchUtils from 'esri/core/watchUtils';\n\ntype Props = {\n    queryResult: IGraphic;\n    mapView?: IMapView;\n};\n\nconst QueryResult: React.FC<Props> = ({ queryResult, mapView }: Props) => {\n    const [graphicLayer, setGraphicLayer] = useState<IGraphicsLayer>();\n\n    const init = async () => {\n        type Modules = [typeof IGraphicsLayer];\n\n        try {\n            const [GraphicsLayer] = await (loadModules([\n                'esri/layers/GraphicsLayer',\n            ]) as Promise<Modules>);\n\n            const layer = new GraphicsLayer({\n                opacity: 0.2,\n                // effect: 'blur(3px)',\n            });\n\n            mapView.map.add(layer, 0);\n\n            setGraphicLayer(layer);\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    const showQueryResult = async () => {\n        type Modules = [\n            typeof IGraphic,\n            typeof IPolygon,\n            typeof ISimpleFillSymbol\n        ];\n\n        const [Graphic, Polygon, SimpleFillSymbol] = await (loadModules([\n            'esri/Graphic',\n            'esri/geometry/Polygon',\n            'esri/symbols/SimpleFillSymbol',\n        ]) as Promise<Modules>);\n\n        const graphic = new Graphic({\n            geometry: new Polygon(queryResult.geometry),\n        });\n\n        graphic.symbol = new SimpleFillSymbol({\n            color: [33, 117, 160, 255],\n            // outline: {\n            //     // autocasts as new SimpleLineSymbol()\n            //     color: SPARKLINE_COLOR_ORANGE,\n            //     width: 1,\n            // },\n        });\n\n        graphicLayer.add(graphic);\n    };\n\n    useEffect(() => {\n        if (mapView) {\n            init();\n        }\n    }, [mapView]);\n\n    useEffect(() => {\n        if (graphicLayer) {\n            graphicLayer.removeAll();\n\n            if (queryResult) {\n                showQueryResult();\n            }\n        }\n    }, [queryResult]);\n\n    return null;\n};\n\nexport default QueryResult;\n","import React, { useEffect, useRef } from 'react';\n\nimport { loadModules } from 'esri-loader';\n\nimport IMapView from 'esri/views/MapView';\nimport IFeatureLayer from 'esri/layers/FeatureLayer';\n// import IPoint from 'esri/geometry/Point';\nimport IGraphic from 'esri/Graphic';\nimport IFeatureLayerView from 'esri/views/layers/FeatureLayerView';\n\ntype Props = {\n    url: string;\n    // itemId: string;\n    outFields?: string[];\n    mapView?: IMapView;\n    visibleScale?: {\n        min: number;\n        max: number;\n    };\n    // onStart?: ()=>void;\n    onSelect: (feature: IGraphic) => void;\n    // pointerOnMove: (position: TooltipPosition) => void;\n    // featureOnHover: (feature: IGraphic) => void;\n};\n\nconst QueryTaskLayer: React.FC<Props> = ({\n    url,\n    // itemId,\n    outFields,\n    mapView,\n    visibleScale,\n    // onStart,\n    onSelect,\n    // pointerOnMove,\n    // featureOnHover,\n}) => {\n    const layerRef = useRef<IFeatureLayer>();\n    const layerViewRef = useRef<IFeatureLayerView>();\n    // const mouseMoveDelay = useRef<number>();\n\n    const isLayerInVisibleRange = () => {\n        return (\n            mapView.scale < layerRef.current.minScale &&\n            mapView.scale > layerRef.current.maxScale\n        );\n    };\n\n    const init = async () => {\n        type Modules = [typeof IFeatureLayer];\n\n        try {\n            const [FeatureLayer] = await (loadModules([\n                'esri/layers/FeatureLayer',\n            ]) as Promise<Modules>);\n\n            const layer = new FeatureLayer({\n                url,\n                // portalItem: {\n                //     id: itemId\n                // },\n                minScale: visibleScale && visibleScale.min,\n                maxScale: visibleScale && visibleScale.max,\n                visible: true,\n                popupEnabled: false,\n                outFields,\n                opacity: 0,\n            });\n\n            mapView.map.add(layer);\n\n            mapView.whenLayerView(layer).then((layerView) => {\n                // console.log(layerView)\n\n                layerRef.current = layer;\n                layerViewRef.current = layerView;\n\n                initEventListeners();\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    const queryFeatures = async ({\n        event,\n        where,\n    }: {\n        event?: __esri.MapViewClickEvent;\n        where?: string;\n    }) => {\n        // console.log(mapView.scale)\n\n        const isVisible = isLayerInVisibleRange();\n\n        if (isVisible) {\n            where = where || '1=1';\n\n            const geometry = event ? mapView.toMap(event) : null;\n\n            const results = await layerViewRef.current.queryFeatures({\n                where,\n                geometry,\n                returnGeometry: true,\n                outFields: outFields || ['*'],\n            });\n\n            onSelect(\n                results.features && results.features.length\n                    ? results.features[0]\n                    : undefined\n            );\n        }\n    };\n\n    const initEventListeners = () => {\n        mapView.on('click', (event) => {\n            queryFeatures({ event });\n        });\n    };\n\n    useEffect(() => {\n        if (mapView) {\n            init();\n        }\n    }, [mapView]);\n\n    // useEffect(()=>{\n    //     if(layerViewRef.current && defaultFIPS){\n\n    //         const fieldName4FIPS = outFields[0]\n    //         const where = `${fieldName4FIPS}='${defaultFIPS}'`\n    //         queryFeatures({\n    //             where\n    //         })\n    //     }\n    // }, [layerViewRef.current])\n\n    return null;\n};\n\nexport default QueryTaskLayer;\n","import React, { useRef, useState, useEffect } from 'react';\n\nimport {\n    MonthlyUmempolymentDataPaths,\n    FeatureWithPathData,\n} from '../../../shared/types';\n\nimport { loadModules } from 'esri-loader';\nimport IMapView from 'esri/views/MapView';\nimport ICIMSymbol from 'esri/symbols/CIMSymbol';\nimport IGraphic from 'esri/Graphic';\nimport IPoint from 'esri/geometry/Point';\nimport IGraphicsLayer from 'esri/layers/GraphicsLayer';\nimport IwatchUtils from 'esri/core/watchUtils';\n\ntype Props = {\n    data: MonthlyUmempolymentDataPaths;\n    // will be used to render national trend\n    nationalLevelData: MonthlyUmempolymentDataPaths;\n    showDeviation?: boolean;\n    color: number[];\n    referenceLineColor: number[];\n    visibleScale?: {\n        min: number;\n        max: number;\n    };\n    mapView?: IMapView;\n};\n\nconst SparklineLayer: React.FC<Props> = ({\n    data,\n    nationalLevelData,\n    showDeviation,\n    color,\n    referenceLineColor,\n    visibleScale,\n    mapView,\n}) => {\n    const renderDealy = useRef<number>();\n\n    const layerRef = useRef<IGraphicsLayer>();\n\n    const [isLayerInVisibleScale, setIsLayerInVisibleScale] = useState<boolean>(\n        false\n    );\n\n    const init = async () => {\n        type Modules = [typeof IGraphicsLayer, typeof IwatchUtils];\n\n        try {\n            const [GraphicsLayer, watchUtils] = await (loadModules([\n                'esri/layers/GraphicsLayer',\n                'esri/core/watchUtils',\n            ]) as Promise<Modules>);\n\n            layerRef.current = new GraphicsLayer({\n                minScale: visibleScale && visibleScale.min,\n                maxScale: visibleScale && visibleScale.max,\n                visible: false,\n            });\n\n            mapView.map.add(layerRef.current);\n\n            watchUtils.whenTrue(mapView, 'stationary', () => {\n                const isInVisibleScale =\n                    mapView.scale < visibleScale.min &&\n                    mapView.scale > visibleScale.max;\n                setIsLayerInVisibleScale(isInVisibleScale);\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    const draw = async () => {\n        const layer = layerRef.current;\n\n        type Modules = [typeof ICIMSymbol, typeof IGraphic, typeof IPoint];\n\n        const nationalLevelPathData =\n            nationalLevelData.features[0].PctUnemployed.path;\n        const nationalLevelFrame = nationalLevelData.frames.PctUnemployed;\n\n        // console.log(nationalLevelData);\n\n        try {\n            const [CIMSymbol, Graphic, Point] = await (loadModules([\n                'esri/symbols/CIMSymbol',\n                'esri/Graphic',\n                'esri/geometry/Point',\n            ]) as Promise<Modules>);\n\n            const { features, frames } = data;\n\n            const frame = showDeviation\n                ? frames.PctUnemployedDeviation\n                : frames.PctUnemployed; // frames.PctUnemployed;\n\n            const addGraphicsByChunk = (startIndex = 0) => {\n                // console.log('doChunk', startIndex)\n                const chunckNum = 800;\n                const endIndex =\n                    startIndex + chunckNum < features.length\n                        ? startIndex + chunckNum\n                        : features.length;\n\n                const data: FeatureWithPathData[] = features.slice(\n                    startIndex,\n                    endIndex\n                );\n\n                const graphics = data.map((feature) => {\n                    const {\n                        geometry,\n                        PctUnemployed,\n                        PctUnemployedDeviation,\n                    } = feature;\n\n                    const pathData = showDeviation\n                        ? PctUnemployedDeviation\n                        : PctUnemployed;\n\n                    const anchorPoint = {\n                        x: 0,\n                        y: showDeviation ? 0 : -0.5,\n                    };\n\n                    const size = showDeviation ? 60 : 30;\n\n                    const { path } = pathData;\n\n                    // const color = [50, 100, 255, 255];\n\n                    // Create the CIM symbol:\n                    //  - set the size value\n                    //  - assign the generated path to the marker's geometry\n                    const symbol = new CIMSymbol({\n                        data: {\n                            type: 'CIMSymbolReference',\n                            symbol: {\n                                type: 'CIMPointSymbol',\n                                symbolLayers: [\n                                    {\n                                        type: 'CIMVectorMarker',\n                                        anchorPoint,\n                                        anchorPointUnits: 'Relative',\n                                        enable: true,\n                                        scaleSymbolsProportionally: false,\n                                        respectFrame: true,\n                                        size,\n                                        frame,\n                                        markerGraphics: [\n                                            {\n                                                type: 'CIMMarkerGraphic',\n                                                geometry: {\n                                                    paths: [path],\n                                                },\n                                                symbol: {\n                                                    type: 'CIMLineSymbol',\n                                                    symbolLayers: [\n                                                        {\n                                                            type:\n                                                                'CIMSolidStroke',\n                                                            width: 1,\n                                                            color,\n                                                        },\n                                                    ],\n                                                },\n                                            },\n                                        ],\n                                    },\n                                    !showDeviation\n                                        ? {\n                                              type: 'CIMVectorMarker',\n                                              anchorPoint,\n                                              anchorPointUnits: 'Relative',\n                                              enable: true,\n                                              scaleSymbolsProportionally: false,\n                                              respectFrame: true,\n                                              size,\n                                              frame: nationalLevelFrame,\n                                              markerGraphics: [\n                                                  {\n                                                      type: 'CIMMarkerGraphic',\n                                                      geometry: {\n                                                          paths: [\n                                                              nationalLevelPathData,\n                                                          ],\n                                                      },\n                                                      symbol: {\n                                                          type: 'CIMLineSymbol',\n                                                          symbolLayers: [\n                                                              {\n                                                                  type:\n                                                                      'CIMSolidStroke',\n                                                                  width: 1,\n                                                                  color: referenceLineColor,\n                                                              },\n                                                          ],\n                                                      },\n                                                  },\n                                              ],\n                                          }\n                                        : null,\n                                    showDeviation\n                                        ? {\n                                              type: 'CIMVectorMarker',\n                                              anchorPoint,\n                                              anchorPointUnits: 'Relative',\n                                              enable: true,\n                                              scaleSymbolsProportionally: false,\n                                              respectFrame: true,\n                                              size,\n                                              frame,\n                                              markerGraphics: [\n                                                  {\n                                                      type: 'CIMMarkerGraphic',\n                                                      geometry: {\n                                                          paths: [\n                                                              [\n                                                                  [0, 0],\n                                                                  [\n                                                                      frame.xmax,\n                                                                      0,\n                                                                  ],\n                                                              ],\n                                                          ],\n                                                      },\n                                                      symbol: {\n                                                          type: 'CIMLineSymbol',\n                                                          symbolLayers: [\n                                                              {\n                                                                  type:\n                                                                      'CIMSolidStroke',\n                                                                  width: 1,\n                                                                  color: referenceLineColor,\n                                                              },\n                                                          ],\n                                                      },\n                                                  },\n                                              ],\n                                          }\n                                        : null,\n                                ],\n                            },\n                        },\n                    });\n\n                    const graphic = new Graphic({\n                        geometry: new Point({\n                            latitude: geometry.y,\n                            longitude: geometry.x,\n                        }),\n                        symbol,\n                    });\n\n                    return graphic;\n                });\n\n                layer.addMany(graphics);\n\n                if (startIndex + chunckNum < features.length) {\n                    renderDealy.current = setTimeout(() => {\n                        addGraphicsByChunk(startIndex + chunckNum);\n                    }, 1);\n                } else {\n                    layer.visible = true;\n                }\n            };\n\n            addGraphicsByChunk(0);\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    useEffect(() => {\n        if (mapView) {\n            init();\n        }\n    }, [mapView]);\n\n    useEffect(() => {\n        if (layerRef.current && data) {\n            layerRef.current.removeAll();\n            clearTimeout(renderDealy.current);\n\n            if (isLayerInVisibleScale) {\n                draw();\n            }\n        }\n    }, [layerRef, data, showDeviation]);\n\n    useEffect(() => {\n        if (\n            data &&\n            isLayerInVisibleScale &&\n            !layerRef.current.graphics.length\n        ) {\n            clearTimeout(renderDealy.current);\n            draw();\n        }\n    }, [isLayerInVisibleScale]);\n\n    return null;\n};\n\nexport default SparklineLayer;\n","import React from 'react';\n// import classnames from 'classnames';\nimport { THEME_COLOR_ORANGE } from '../../constants/style';\nimport { ThemeText } from '../InfoPanel/InfoText';\n\ntype Props = {\n    showDeviation: boolean;\n    onChange: () => void;\n};\n\ntype SwitcherBtnProps = {\n    isActive: boolean;\n    onClick: () => void;\n    children: React.ReactNode;\n};\n\nconst SwitcherBtn: React.FC<SwitcherBtnProps> = ({\n    isActive,\n    onClick,\n    children,\n}: SwitcherBtnProps) => {\n    const borderColor = isActive ? THEME_COLOR_ORANGE : 'transparent';\n\n    return (\n        <div\n            onClick={onClick}\n            style={{\n                borderBottom: `3px solid ${borderColor}`,\n                margin: '0 .5rem',\n                // lineHeight: '1.2',\n                cursor: 'pointer',\n            }}\n        >\n            {children}\n        </div>\n    );\n};\n\nconst SparklineLayerSwitcher: React.FC<Props> = ({\n    showDeviation,\n    onChange,\n}: Props) => {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                alignItems: 'center',\n            }}\n        >\n            <SwitcherBtn isActive={!showDeviation} onClick={onChange}>\n                <ThemeText\n                    color=\"orange\"\n                    // customLineHeight='1.1'\n                >\n                    Local Rate\n                </ThemeText>{' '}\n                <ThemeText\n                    color=\"blue\"\n                    // customLineHeight='1'\n                >\n                    {'& '} National Rate\n                </ThemeText>\n            </SwitcherBtn>\n\n            <SwitcherBtn isActive={showDeviation} onClick={onChange}>\n                <ThemeText\n                    color=\"orange\"\n                    // customLineHeight='1'\n                >\n                    Local Difference\n                </ThemeText>{' '}\n                <ThemeText\n                    color=\"blue\"\n                    // customLineHeight='1'\n                >\n                    from National Rate\n                </ThemeText>\n            </SwitcherBtn>\n        </div>\n    );\n};\n\nexport default SparklineLayerSwitcher;\n","import React from 'react';\n\nimport { AppLayout } from '../../components';\n\nconst RootPage = () => {\n    return <AppLayout />;\n};\n\nexport default RootPage;\n","import './styles/index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// import { Provider as ReduxProvider } from 'react-redux';\n// import configureAppStore, { getPreloadedState } from './store/configureStore';\n\nimport AppContextProvider from './contexts/AppContextProvider';\n\nimport { RootPage } from './pages';\n\n(async () => {\n    // const preloadedState = getPreloadedState();\n\n    ReactDOM.render(\n        <React.StrictMode>\n            <AppContextProvider>\n                <RootPage />\n            </AppContextProvider>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n})();\n"],"sourceRoot":""}