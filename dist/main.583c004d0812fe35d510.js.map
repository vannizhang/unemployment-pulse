{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./scripts/src/getPopulationData.ts","webpack:///./scripts/src/donwload-data.ts","webpack:///./src/services/monthly-unemployment-data.ts","webpack:///./src/contexts/AppContextProvider.tsx","webpack:///./scripts/src/constants.ts","webpack:///./src/utils/URLHashParams.ts","webpack:///./src/components/ArcGIS/MapView.tsx","webpack:///./src/constants/map.ts","webpack:///./src/constants/style.ts","webpack:///./src/components/AppLayout/AppLayout.tsx","webpack:///./src/components/InfoPanel/InfoText.tsx","webpack:///./src/components/Header/Header.tsx","webpack:///./src/components/InfoPanel/SummaryInfo.tsx","webpack:///./src/components/InfoPanel/UnemploymentInfo.tsx","webpack:///./src/components/QuickD3Chart/constants.ts","webpack:///./src/components/QuickD3Chart/elements/Bars.tsx","webpack:///./src/components/QuickD3Chart/elements/Line.tsx","webpack:///./src/components/QuickD3Chart/elements/PointerEventsOverlay.tsx","webpack:///./src/components/QuickD3Chart/elements/SvgContainer.tsx","webpack:///./src/components/QuickD3Chart/elements/Tooltip.tsx","webpack:///./src/components/QuickD3Chart/elements/TooltipContent.tsx","webpack:///./src/components/QuickD3Chart/elements/XAxis.tsx","webpack:///./src/components/QuickD3Chart/elements/YAxis.tsx","webpack:///./src/components/QuickD3Chart/BarLineCombined/BarLineCombined.tsx","webpack:///./src/components/InfoPanel/Chart.tsx","webpack:///./src/components/InfoPanel/InfoPanel.tsx","webpack:///./src/components/QueryResult/QueryResult.tsx","webpack:///./src/components/QueryTask/QueryTask.tsx","webpack:///./src/components/SparklineLayer/SparklineLayer.tsx","webpack:///./src/components/SparklineLayerSwitcher/SparklineLayerSwitcher.tsx","webpack:///./src/pages/Root/RootPage.tsx","webpack:///./src/index.tsx"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","require","fetch","setDefaultRequestOptions","UNEMPLOYMENT_SERVICE_URL","outFields","queryMonths","a","axios","params","where","join","returnGeometry","f","features","feature","attributes","CurrentMonth","P01Month","P02Month","P03Month","P04Month","P05Month","P06Month","P07Month","P08Month","P09Month","P10Month","P11Month","P12Month","P13Month","reverse","AppContext","createContext","fetchDataFromPublicFolder","filename","AppContextProvider","children","useState","setValue","loadAppData","unemploymentDataPathsStates","unemploymentDataPathsCounties","unemploymentDataPathsUS","unemploymentDataByFIPS","months","isMobileDevice","miscFns","React","useEffect","Provider","DefaultHashParams","urlFns","parseHash","getDefaultValueFromHashParams","getMapLocationFromUrlSearchParams","updateMapLocation","mapLocation","lon","lat","zoom","updateHashParam","hashParams","values","split","map","updateFIPSInURLHashParams","FIPS","defaultMapLocation","MapView","webmapId","mapDivRef","useRef","mapView","setMapView","initMapView","loadModules","WebMap","center","undefined","view","container","current","portalItem","id","padding","top","when","addWatchEvent","whenTrue","centerLocation","latitude","toFixed","longitude","loadCss","style","position","left","width","height","ref","Children","child","cloneElement","VISIBLE_SCALE_STATES","min","max","VISIBLE_SCALE_COUNTIES","SPARKLINE_COLOR_ORANGE","SPARKLINE_COLOR_BLUE","SEPARATOR_COLOR","defaultFIPS","AppLayout","useContext","unemploymentData4SelectedFeature","setUnemploymentData4SelectedFeature","showDeviation","setShowDeviation","selectedFeature","setSelectedFeature","onChange","nationalLevelData","visibleScale","color","referenceLineColor","QueryTask","url","onSelect","queryResult","close","FontSizeLookup","default","small","medium","large","ThemeText","size","customFontSize","customLineHeight","classNames","classnames","fontSize","lineHeight","className","InfoText","title","subtitle","display","alignItems","HeaderContainer","styled","div","Title","cursor","xmlns","viewBox","Header","SummaryInfoContainer","SummaryInfo","participationRate","useMemo","Math","floor","workforce","unemployed","numberFns","numberWithCommas","population","borderRight","UnemploymentInfoContainer","UnemploymentRateTextWrap","StatisticsInfoContainer","InfoTextWrap","getStatistics","PctUnemployed","idx4lastMonth","idx4LastYear","index4LowesetMonth","idx4highestMonth","idx","month","year","toUpperCase","unemploymentCategory","rate","UnemploymentInfo","lastMonth","lastYear","lowest","highest","marginBottom","unemploymentRate","maxWidth","marginTop","rank","fips","toString","MARGIN","right","bottom","Bars","xScale","yScale","svgContainerData","barsGroup","existingBars","dimension","select","selectAll","remove","enter","append","attr","bandwidth","Line","lineGroup","xOffset","valueline","line","curve","curveMonotoneX","x","y","lines","exit","PointerEventsOverlay","xDomain","onHover","containerG","itemOnHover","setDataOnHover","updateVerticalRefLinePos","vRefLine","opacity","xPos","xPosition","getDataByMousePos","mousePosX","offset","index","index4ItemOnHover","itemIndex","len","currItem","currItemPos","nextItemIndex","nextItem","nextItemPos","distToCurrItem","abs","distToNextItem","on","mouse","this","initOverlayRect","SvgContainer","margin","resizable","dimensionOnChange","containerRef","svgRef","rootGroupRef","dimensionRef","setSvgContainerData","updateDimension","svg","node","rootGroup","offsetWidth","offsetHeight","useLayoutEffect","addEventListener","removeEventListener","transform","Tooltip","pointerPosition","data4Bars","data4Line","tooltipRef","tooltipPos","setTooltipPos","tooltipDiv","tooltipDivWidth","xPosForItemOnHover","updateTooltipPosition","pointerEvents","boxSizing","boxShadow","zIndex","barDataOnHover","lineDataOnHover","TooltipContent","background","YAxis","scale","tickValues","timeFormatSpecifier","formatTime","timeFormat","xAxisGenerator","axisBottom","tickFormat","date","Date","abbreviation","xAxisLabel","xAxisG","drawXAxis","XAxis","yAxis","axisLeft","ticks","tickPadding","yAxisLabel","yAxisG","drawYAxis","BarLineCombined","barColor","lineColor","lineWidth","numOfTicksOnXAxisToHide","setDimension","pointerPositionOnHover","setPointerPositionOnHover","scaleBand","paddingInner","range","domain","xmin","xmax","scaleTime","scaleLinear","ymax4Bars","ymax4Lines","ymax","xScaleTickValues","filter","getChartData","Chart","flexGrow","InfoPanelContainer","CloseBtnDiv","InfoPanel","onClick","QueryResult","graphicLayer","setGraphicLayer","init","GraphicsLayer","layer","add","showQueryResult","Graphic","Polygon","SimpleFillSymbol","graphic","geometry","symbol","removeAll","QueryTaskLayer","layerRef","layerViewRef","FeatureLayer","minScale","maxScale","visible","popupEnabled","whenLayerView","then","layerView","initEventListeners","queryFeatures","event","toMap","results","SparklineLayer","renderDealy","isLayerInVisibleScale","setIsLayerInVisibleScale","watchUtils","isInVisibleScale","draw","nationalLevelPathData","path","nationalLevelFrame","frames","CIMSymbol","Point","frame","PctUnemployedDeviation","addGraphicsByChunk","startIndex","chunckNum","endIndex","graphics","anchorPoint","type","symbolLayers","anchorPointUnits","enable","scaleSymbolsProportionally","respectFrame","markerGraphics","paths","addMany","setTimeout","clearTimeout","SwitcherBtn","isActive","borderColor","borderBottom","SparklineLayerSwitcher","RootPage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"main.583c004d0812fe35d510.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([135,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","// ArcGIS REST JS is supported in Node.js 8.x and above. It requires additional packages to polyfill Fetch and FormData.\r\nrequire('isomorphic-form-data');\r\nconst fetch = require('node-fetch');\r\nimport { IQueryFeaturesResponse, queryFeatures } from '@esri/arcgis-rest-feature-layer';\r\nimport { setDefaultRequestOptions } from '@esri/arcgis-rest-request';\r\nimport {\r\n    getStateAbbrev\r\n} from './getStateAbbrev';\r\n\r\n// use node-fetch for each request instead of relying on a global\r\nsetDefaultRequestOptions({ fetch })\r\n\r\ntype PopulationLookup = {\r\n    [fips:string]: {\r\n        name: string;\r\n        population: number;\r\n    }\r\n}\r\n\r\nexport const populationLookup:PopulationLookup = {};\r\n\r\nconst ACS_TOTAL_POPULATION_FEATURE_SERVICE_URL = 'https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/ACS_Total_Population_Boundaries/FeatureServer';\r\n\r\nexport const downloadACSData = async()=>{\r\n\r\n    const outFields = ['GEOID','NAME','B01001_001E'];\r\n\r\n    const queryResponse4States = await queryFeatures({\r\n        url: `${ACS_TOTAL_POPULATION_FEATURE_SERVICE_URL}/0`,\r\n        where: '1=1',\r\n        outFields,\r\n        returnGeometry: false,\r\n        f: 'json'\r\n    }) as IQueryFeaturesResponse\r\n\r\n    const queryResponse4Counties1 = await queryFeatures({\r\n        url: `${ACS_TOTAL_POPULATION_FEATURE_SERVICE_URL}/1/query`,\r\n        where: '1=1',\r\n        outFields,\r\n        returnGeometry: false,\r\n        f: 'json'\r\n    }) as IQueryFeaturesResponse\r\n\r\n    const queryResponse4Counties2 = await queryFeatures({\r\n        url: `${ACS_TOTAL_POPULATION_FEATURE_SERVICE_URL}/1/query`,\r\n        where: '1=1',\r\n        outFields,\r\n        returnGeometry: false,\r\n        resultOffset: 2000,\r\n        f: 'json'\r\n    }) as IQueryFeaturesResponse\r\n\r\n    if(queryResponse4States && queryResponse4States.features){\r\n\r\n        const { features } = queryResponse4States;\r\n\r\n        for(let feature of features){\r\n            const {\r\n                GEOID,\r\n                NAME,\r\n                B01001_001E\r\n            } = feature.attributes;\r\n    \r\n            populationLookup[GEOID] = {\r\n                name: NAME,\r\n                population: B01001_001E\r\n            }\r\n        }\r\n    }\r\n\r\n    if(\r\n        queryResponse4Counties1 && \r\n        queryResponse4Counties1.features &&\r\n        queryResponse4Counties2 && \r\n        queryResponse4Counties2.features\r\n    ){\r\n        const features = [\r\n            ...queryResponse4Counties1.features,\r\n            ...queryResponse4Counties2.features\r\n        ]\r\n\r\n        for(let feature of features){\r\n            const {\r\n                GEOID,\r\n                NAME,\r\n                B01001_001E\r\n            } = feature.attributes;\r\n\r\n            // remove the word \"county\" from end of the county name \r\n            const countyName = NAME.split(' ').slice(0, -1).join(' ');\r\n            const stateName = getStateAbbrev(GEOID.slice(0,2))\r\n    \r\n            populationLookup[GEOID] = {\r\n                name: countyName + ', ' + stateName,\r\n                population: B01001_001E\r\n            }\r\n        }\r\n    }\r\n};","import axios from 'axios'\r\n\r\nexport const UNEMPLOYMENT_SERVICE_URL = 'https://services.arcgis.com/P3ePLMYs2RVChkJx/arcgis/rest/services/BLS_Monthly_Unemployment_Current_14_Months/FeatureServer';\r\nconst LAYER_ID_US = '0';\r\nconst LAYER_ID_STATE = '1';\r\nconst LAYER_ID_COUNTIES = '2';\r\n\r\nimport {\r\n    UnempolymentData, \r\n    MonthlyUmempolymentData\r\n} from '../../shared/types';\r\n\r\nimport {\r\n    populationLookup\r\n} from './getPopulationData'\r\n\r\ntype MonthlyUnemploymentFeature = {\r\n    attributes: {\r\n        fips: string;\r\n\r\n        PctUnemployed_CurrentMonth: number;\r\n        PctUnemployed_01Month : number;\r\n        PctUnemployed_02Month : number;\r\n        PctUnemployed_03Month : number;\r\n        PctUnemployed_04Month : number;\r\n        PctUnemployed_05Month : number;\r\n        PctUnemployed_06Month : number;\r\n        PctUnemployed_07Month : number;\r\n        PctUnemployed_08Month : number;\r\n        PctUnemployed_09Month : number;\r\n        PctUnemployed_10Month : number;\r\n        PctUnemployed_11Month : number;\r\n        PctUnemployed_12Month : number;\r\n        PctUnemployed_13Month : number;\r\n\r\n        LaborForce_CurrentMonth: number;\r\n        Unemployed_CurrentMonth: number;\r\n\r\n        CurrentMonth: string;\r\n        P13Month: string;\r\n\r\n        [key:string]: any;\r\n    },\r\n    centroid: {\r\n        x: number;\r\n        y: number;\r\n    }\r\n}\r\n\r\ntype QueryResult = {\r\n    features: MonthlyUnemploymentFeature[]\r\n}\r\n\r\nconst outFields = 'fips, PctUnemployed_CurrentMonth, PctUnemployed_01Month, PctUnemployed_02Month, PctUnemployed_03Month, PctUnemployed_04Month, PctUnemployed_05Month, PctUnemployed_06Month, PctUnemployed_07Month, PctUnemployed_08Month, PctUnemployed_09Month, PctUnemployed_10Month, PctUnemployed_11Month, PctUnemployed_12Month, PctUnemployed_13Month, CurrentMonth, P13Month, LaborForce_CurrentMonth, Unemployed_CurrentMonth';\r\n\r\nconst queryParams = {\r\n    f: 'json',\r\n    // exclude Puerto Rico\r\n    where: 'fips <> 72',\r\n    returnGeometry: false,\r\n    returnCentroid: true,\r\n    outSR: 4326,\r\n    outFields\r\n}\r\n\r\nconst QueryParams = `f=json&where=1=1&returnGeometry=false&returnCentroid=true&outSR=4326&outFields=${outFields}`;\r\n\r\n// use this function to fetch data for all 50 states or the entire US\r\nexport const fecthData4States = async(shouldFetchNationalAverage=false):Promise<MonthlyUmempolymentData>=>{\r\n\r\n    const layerId = shouldFetchNationalAverage ? LAYER_ID_US : LAYER_ID_STATE;\r\n\r\n    try{\r\n        const { data } = await axios.get<QueryResult>(`${UNEMPLOYMENT_SERVICE_URL}/${layerId}/query`, { params: queryParams });\r\n        return processQueryResult(data.features);\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport const fetchData4Counties = async():Promise<MonthlyUmempolymentData>=>{\r\n    try {\r\n\r\n        const response4Counties1 = await axios.get<QueryResult>(`${UNEMPLOYMENT_SERVICE_URL}/${LAYER_ID_COUNTIES}/query?${QueryParams}`);\r\n\r\n        const response4Counties2 = await axios.get<QueryResult>(`${UNEMPLOYMENT_SERVICE_URL}/${LAYER_ID_COUNTIES}/query?${QueryParams}&resultOffset=2000`);\r\n\r\n        const features = [\r\n            ...response4Counties1.data.features,\r\n            ...response4Counties2.data.features\r\n        ];\r\n\r\n        return processQueryResult(features)\r\n\r\n    } catch(err){\r\n        console.error(err)\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nconst processQueryResult = (features:MonthlyUnemploymentFeature[]):MonthlyUmempolymentData=>{\r\n\r\n    if(!features || !features.length){\r\n        return;\r\n    }\r\n\r\n    let maxPctUnemployed = 0;\r\n\r\n    const pctUnemployedSorted = features\r\n        .map(feature=>{\r\n            const {\r\n                attributes,\r\n            } = feature;\r\n\r\n            const { \r\n                PctUnemployed_CurrentMonth,\r\n            } = attributes;\r\n\r\n            return PctUnemployed_CurrentMonth\r\n        })\r\n        .sort((a,b)=>b-a);\r\n\r\n    const data:UnempolymentData[] = features.map(feature=>{\r\n\r\n        const {\r\n            attributes,\r\n            centroid\r\n        } = feature;\r\n\r\n        const { \r\n            fips,\r\n            PctUnemployed_CurrentMonth,\r\n            PctUnemployed_01Month,\r\n            PctUnemployed_02Month,\r\n            PctUnemployed_03Month,\r\n            PctUnemployed_04Month,\r\n            PctUnemployed_05Month,\r\n            PctUnemployed_06Month,\r\n            PctUnemployed_07Month,\r\n            PctUnemployed_08Month,\r\n            PctUnemployed_09Month,\r\n            PctUnemployed_10Month,\r\n            PctUnemployed_11Month,\r\n            PctUnemployed_12Month,\r\n            PctUnemployed_13Month,\r\n            LaborForce_CurrentMonth,\r\n            Unemployed_CurrentMonth\r\n        } = attributes;\r\n\r\n        const PctUnemployed = [\r\n            PctUnemployed_13Month,\r\n            PctUnemployed_12Month,\r\n            PctUnemployed_11Month,\r\n            PctUnemployed_10Month,\r\n            PctUnemployed_09Month,\r\n            PctUnemployed_08Month,\r\n            PctUnemployed_07Month,\r\n            PctUnemployed_06Month,\r\n            PctUnemployed_05Month,\r\n            PctUnemployed_04Month,\r\n            PctUnemployed_03Month,\r\n            PctUnemployed_02Month,\r\n            PctUnemployed_01Month,\r\n            PctUnemployed_CurrentMonth\r\n        ];\r\n\r\n        maxPctUnemployed = Math.max(maxPctUnemployed, Math.max(...PctUnemployed))\r\n\r\n        const {\r\n            x, y\r\n        } = centroid;\r\n\r\n        const populationData = populationLookup[fips];\r\n\r\n        const name = populationData ? populationData.name : '';\r\n        const population = populationData ? populationData.population : 0;\r\n        const rank = binarySearchIdx(pctUnemployedSorted, PctUnemployed_CurrentMonth) + 1;\r\n\r\n        const geometry = {\r\n            x: +x.toFixed(5),\r\n            y: +y.toFixed(5)\r\n        };\r\n\r\n        return {\r\n            attributes: {\r\n                fips,\r\n                name,\r\n                population,\r\n                workforce: LaborForce_CurrentMonth,\r\n                unemployed: Unemployed_CurrentMonth,\r\n                unemploymentRate: PctUnemployed_CurrentMonth,\r\n                rank\r\n            },\r\n            geometry,\r\n            PctUnemployed,\r\n        };\r\n    });\r\n\r\n    return {\r\n        data,\r\n        maxPctUnemployed\r\n    }\r\n};\r\n\r\nexport const addDeviationData = (monthlyUnemploymentData:MonthlyUmempolymentData, nationalUnemploymentData:MonthlyUmempolymentData):MonthlyUmempolymentData=>{\r\n\r\n    const pctUnemployedFromNationalData = nationalUnemploymentData.data[0].PctUnemployed;\r\n\r\n    if(!pctUnemployedFromNationalData || !pctUnemployedFromNationalData.length){\r\n        console.error('failed to calc deviation data - national unemployment data are not available');\r\n        return;\r\n    }\r\n\r\n    let maxPctUnemployedDeviation = 0;\r\n\r\n    monthlyUnemploymentData.data = monthlyUnemploymentData.data.map(d=>{\r\n\r\n        const { PctUnemployed } = d;\r\n\r\n        const PctUnemployedDeviation = PctUnemployed.map((pctUnemployed, idx)=>{\r\n            const pctUnemployedNational = pctUnemployedFromNationalData[idx];\r\n            const deviation = +(pctUnemployed - pctUnemployedNational).toFixed(2);\r\n\r\n            if(Math.abs(deviation) > maxPctUnemployedDeviation){\r\n                maxPctUnemployedDeviation = Math.abs(deviation)\r\n            }\r\n\r\n            return deviation;\r\n        });\r\n\r\n        return {\r\n            ...d,\r\n            PctUnemployedDeviation,\r\n        }\r\n    })\r\n\r\n    return {\r\n        ...monthlyUnemploymentData,\r\n        maxPctUnemployedDeviation\r\n    };\r\n}\r\n// find index of target number from a desc sorted array, which will be used as rank\r\nconst binarySearchIdx = (nums: number[], target:number):number=>{\r\n    let left = 0;\r\n    let right = nums.length - 1;\r\n\r\n    while(left <= right){\r\n        const midIdx = Math.floor((left + right) / 2);\r\n\r\n        if(target < nums[midIdx]){\r\n            left = midIdx + 1;\r\n        } else {\r\n            right = midIdx - 1;\r\n        }\r\n    }\r\n\r\n    return left;\r\n}\r\n","import axios from 'axios';\nimport { UNEMPLOYMENT_SERVICE_URL } from '../../shared/constants';\n\nexport const queryMonths = async () => {\n    let result: string[] = [];\n\n    const { data } = await axios.get(`${UNEMPLOYMENT_SERVICE_URL}/0/query`, {\n        params: {\n            where: '1=1',\n            outFields: [\n                'CurrentMonth',\n                'P01Month',\n                'P02Month',\n                'P03Month',\n                'P04Month',\n                'P05Month',\n                'P06Month',\n                'P07Month',\n                'P08Month',\n                'P09Month',\n                'P10Month',\n                'P11Month',\n                'P12Month',\n                'P13Month',\n            ].join(','),\n            returnGeometry: false,\n            f: 'json',\n        },\n    });\n\n    if (data.features) {\n        const feature = data.features[0];\n\n        const {\n            CurrentMonth,\n            P01Month,\n            P02Month,\n            P03Month,\n            P04Month,\n            P05Month,\n            P06Month,\n            P07Month,\n            P08Month,\n            P09Month,\n            P10Month,\n            P11Month,\n            P12Month,\n            P13Month,\n        } = feature.attributes;\n\n        result = [\n            CurrentMonth,\n            P01Month,\n            P02Month,\n            P03Month,\n            P04Month,\n            P05Month,\n            P06Month,\n            P07Month,\n            P08Month,\n            P09Month,\n            P10Month,\n            P11Month,\n            P12Month,\n            P13Month,\n        ].reverse();\n    }\n\n    return result;\n};\n","import React, { useState, createContext } from 'react';\nimport axios from 'axios';\n\nimport {\n    MonthlyUmempolymentDataPaths,\n    UnempolymentDataByFIPS,\n} from '../../shared/types';\n\nimport {\n    UNEMPLOYMENT_PATHS_COUNTIES_FILE_NAME,\n    UNEMPLOYMENT_PATHS_STATES_FILE_NAME,\n    UNEMPLOYMENT_PATHS_US_FILE_NAME,\n    UNEMPLOYMENT_DATA_FILE_NAME,\n} from '../../shared/constants';\nimport { queryMonths } from '../services/monthly-unemployment-data';\n\nimport { miscFns } from 'helper-toolkit-ts';\n\nexport type AppContextValue = {\n    unemploymentDataPathsUS: MonthlyUmempolymentDataPaths;\n    unemploymentDataPathsStates: MonthlyUmempolymentDataPaths;\n    unemploymentDataPathsCounties: MonthlyUmempolymentDataPaths;\n    unemploymentDataByFIPS: UnempolymentDataByFIPS;\n    months: string[];\n    isMobileDevice?: boolean;\n};\n\ntype AppContextProviderProps = {\n    children?: React.ReactNode;\n};\n\nexport const AppContext = createContext<AppContextValue>(null);\n\nconst fetchDataFromPublicFolder = async <T extends unknown>(\n    filename: string\n): Promise<T> => {\n    const PUBLIC_PATH = './public';\n\n    try {\n        const { data } = await axios.get<T>(`${PUBLIC_PATH}/${filename}`);\n        return data;\n    } catch (err) {\n        console.error(err);\n    }\n\n    return null;\n};\n\nconst AppContextProvider: React.FC<AppContextProviderProps> = ({\n    children,\n}: AppContextProviderProps) => {\n    const [value, setValue] = useState<AppContextValue>();\n\n    const loadAppData = async () => {\n        try {\n            const unemploymentDataPathsStates = await fetchDataFromPublicFolder<\n                MonthlyUmempolymentDataPaths\n            >(UNEMPLOYMENT_PATHS_STATES_FILE_NAME);\n\n            const unemploymentDataPathsCounties = await fetchDataFromPublicFolder<\n                MonthlyUmempolymentDataPaths\n            >(UNEMPLOYMENT_PATHS_COUNTIES_FILE_NAME);\n\n            const unemploymentDataPathsUS = await fetchDataFromPublicFolder<\n                MonthlyUmempolymentDataPaths\n            >(UNEMPLOYMENT_PATHS_US_FILE_NAME);\n\n            const unemploymentDataByFIPS = await fetchDataFromPublicFolder<\n                UnempolymentDataByFIPS\n            >(UNEMPLOYMENT_DATA_FILE_NAME);\n\n            const months = await queryMonths();\n\n            setValue({\n                unemploymentDataPathsStates,\n                unemploymentDataPathsCounties,\n                unemploymentDataPathsUS,\n                unemploymentDataByFIPS,\n                months,\n                isMobileDevice: miscFns.isMobileDevice(),\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    React.useEffect(() => {\n        loadAppData();\n    }, []);\n\n    return (\n        <AppContext.Provider value={value}>\n            {value ? children : null}\n        </AppContext.Provider>\n    );\n};\n\nexport default AppContextProvider;\n","export const UNEMPLOYMENT_PATHS_COUNTIES_FILE_NAME = 'unemployment-counties-paths.json';\r\n// export const UNEMPLOYMENT_COUNTIES_FILE_NAME = 'unemployment-counties.json';\r\nexport const UNEMPLOYMENT_PATHS_STATES_FILE_NAME = 'unemployment-states-paths.json';\r\n// export const UNEMPLOYMENT_STATES_FILE_NAME = 'unemployment-states.json';\r\nexport const UNEMPLOYMENT_PATHS_US_FILE_NAME = 'unemployment-national-paths.json';\r\n// export const UNEMPLOYMENT_US_FILE_NAME = 'unemployment-national.json';\r\nexport const UNEMPLOYMENT_DATA_FILE_NAME = 'unemployment-data.json';","import { urlFns } from 'helper-toolkit-ts';\n\ntype UrlHashParamKey = '@' | 'fips';\n\ntype HashParams = {\n    [key: string]: string;\n};\n\nexport type MapLocation = {\n    lon: number;\n    lat: number;\n    zoom: number;\n};\n\nconst DefaultHashParams: HashParams = urlFns.parseHash();\n\nexport const getDefaultValueFromHashParams = (key: UrlHashParamKey) => {\n    if (key === '@') {\n        return getMapLocationFromUrlSearchParams(DefaultHashParams);\n    }\n\n    return DefaultHashParams[key] || null;\n};\n\nexport const updateMapLocation = (mapLocation: MapLocation) => {\n    const key: UrlHashParamKey = '@';\n\n    if (!mapLocation) {\n        return;\n    }\n\n    const { lon, lat, zoom } = mapLocation;\n\n    urlFns.updateHashParam({\n        key,\n        value: `${lon},${lat},${zoom}`,\n    });\n};\n\nconst getMapLocationFromUrlSearchParams = (hashParams: HashParams) => {\n    const key: UrlHashParamKey = '@';\n\n    if (!hashParams[key]) {\n        return null;\n    }\n\n    const values: number[] = hashParams[key].split(',').map((d: string) => +d);\n\n    const [lon, lat, zoom] = values;\n\n    return { lon, lat, zoom };\n};\n\nexport const updateFIPSInURLHashParams = (FIPS?: string) => {\n    const key: UrlHashParamKey = 'fips';\n\n    urlFns.updateHashParam({\n        key,\n        value: FIPS || '',\n    });\n};\n","import React from 'react';\n\nimport { loadModules, loadCss } from 'esri-loader';\nimport IMapView from 'esri/views/MapView';\nimport IWebMap from 'esri/WebMap';\nimport IwatchUtils from 'esri/core/watchUtils';\n\nimport {\n    updateMapLocation,\n    getDefaultValueFromHashParams,\n    MapLocation,\n} from '../../utils/URLHashParams';\n\ninterface Props {\n    webmapId: string;\n    children?: React.ReactNode;\n}\n\nconst defaultMapLocation = getDefaultValueFromHashParams('@') as MapLocation;\n\nconst MapView: React.FC<Props> = ({ webmapId, children }: Props) => {\n    const mapDivRef = React.useRef<HTMLDivElement>();\n\n    const [mapView, setMapView] = React.useState<IMapView>(null);\n\n    const initMapView = async () => {\n        type Modules = [typeof IMapView, typeof IWebMap];\n\n        try {\n            const [MapView, WebMap] = await (loadModules([\n                'esri/views/MapView',\n                'esri/WebMap',\n            ]) as Promise<Modules>);\n\n            const { lat, lon, zoom } = defaultMapLocation || {};\n\n            const center = lon && lat ? [lon, lat] : undefined;\n\n            const view = new MapView({\n                container: mapDivRef.current,\n                map: new WebMap({\n                    portalItem: {\n                        id: webmapId,\n                    },\n                }),\n                center,\n                zoom,\n                padding: {\n                    top: 60,\n                },\n            });\n\n            view.when(() => {\n                setMapView(view);\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    const addWatchEvent = async () => {\n        type Modules = [typeof IwatchUtils];\n\n        try {\n            const [watchUtils] = await (loadModules([\n                'esri/core/watchUtils',\n            ]) as Promise<Modules>);\n\n            watchUtils.whenTrue(mapView, 'stationary', () => {\n                // console.log('mapview is stationary', mapView.center, mapView.zoom);\n\n                if (mapView.zoom === -1) {\n                    return;\n                }\n\n                // console.log(mapView.scale)\n\n                const centerLocation = {\n                    lat:\n                        mapView.center && mapView.center.latitude\n                            ? +mapView.center.latitude.toFixed(3)\n                            : 0,\n                    lon:\n                        mapView.center && mapView.center.longitude\n                            ? +mapView.center.longitude.toFixed(3)\n                            : 0,\n                    zoom: mapView.zoom,\n                };\n\n                updateMapLocation(centerLocation);\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    React.useEffect(() => {\n        loadCss();\n        initMapView();\n    }, []);\n\n    React.useEffect(() => {\n        if (mapView) {\n            addWatchEvent();\n        }\n    }, [mapView]);\n\n    return (\n        <>\n            <div\n                style={{\n                    position: 'absolute',\n                    top: 0,\n                    left: 0,\n                    width: '100%',\n                    height: '100%',\n                }}\n                ref={mapDivRef}\n            ></div>\n            {mapView\n                ? React.Children.map(children, (child) => {\n                      return React.cloneElement(\n                          child as React.ReactElement<any>,\n                          {\n                              mapView,\n                          }\n                      );\n                  })\n                : null}\n        </>\n    );\n};\n\nexport default MapView;\n","export const WEB_MAP_ID = '8054e038927a48419ee0dddb86006ad6';\nexport const URL_US_STATES_GENERALIZED =\n    'https://services.arcgis.com/P3ePLMYs2RVChkJx/ArcGIS/rest/services/USA_States_Generalized/FeatureServer/0';\nexport const URL_US_COUNTIES_GENERALIZED =\n    'https://services.arcgis.com/P3ePLMYs2RVChkJx/ArcGIS/rest/services/USA_Counties_Generalized/FeatureServer/0';\n\nexport const VISIBLE_SCALE_STATES = {\n    min: 99999999,\n    max: 3000000,\n};\n\nexport const VISIBLE_SCALE_COUNTIES = {\n    min: 3000000,\n    max: 0,\n};\n","export const THEME_COLOR_ORANGE = '#FF8000';\nexport const THEME_COLOR_BLUE = '#136AA4';\n\nexport const SPARKLINE_COLOR_ORANGE = [255, 155, 10, 255]; //'#ff9b0a'\nexport const SPARKLINE_COLOR_BLUE = [51, 146, 214, 255]; // '#3392d6'\n\nexport const SEPARATOR_COLOR = 'rgba(20,106,164,.5)';\nexport const PANEL_BACKGROUND = 'rgba(3, 26, 57, 0.9)';\n\nexport const BREAKPOINT_SMALL = 767;\n","import React, { useContext, useState, useEffect } from 'react';\n\nimport { MapView } from '../ArcGIS';\n\nimport {\n    SparklineLayer,\n    SparklineLayerSwitcher,\n    QueryTaskLayer,\n    QueryResultLayer,\n    InfoPanel,\n    Header,\n} from '../';\n\nimport {\n    URL_US_COUNTIES_GENERALIZED,\n    URL_US_STATES_GENERALIZED,\n    VISIBLE_SCALE_COUNTIES,\n    VISIBLE_SCALE_STATES,\n    WEB_MAP_ID,\n} from '../../constants/map';\n\nimport { AppContext, AppContextValue } from '../../contexts/AppContextProvider';\nimport {\n    SPARKLINE_COLOR_BLUE,\n    SPARKLINE_COLOR_ORANGE,\n} from '../../constants/style';\nimport { UnempolymentData } from '../../../shared/types';\n\nimport IGraphic from 'esri/Graphic';\n\nimport {\n    updateFIPSInURLHashParams,\n    getDefaultValueFromHashParams,\n} from '../../utils/URLHashParams';\n\nconst defaultFIPS = getDefaultValueFromHashParams('fips') as string;\n// console.log(defaultFIPS)\n\nconst AppLayout = () => {\n    const {\n        unemploymentDataPathsStates,\n        unemploymentDataPathsCounties,\n        unemploymentDataPathsUS,\n        unemploymentDataByFIPS,\n    } = useContext<AppContextValue>(AppContext);\n\n    // unemployment for selected county or state\n    const [\n        unemploymentData4SelectedFeature,\n        setUnemploymentData4SelectedFeature,\n    ] = useState<UnempolymentData>(unemploymentDataByFIPS[defaultFIPS]);\n\n    const [showDeviation, setShowDeviation] = useState<boolean>(false);\n\n    const [selectedFeature, setSelectedFeature] = useState<IGraphic>();\n\n    useEffect(() => {\n        if (selectedFeature) {\n            const FIPS = selectedFeature\n                ? selectedFeature.attributes['FIPS'] ||\n                  selectedFeature.attributes['STATE_FIPS']\n                : undefined;\n\n            setUnemploymentData4SelectedFeature(unemploymentDataByFIPS[FIPS]);\n\n            updateFIPSInURLHashParams(FIPS);\n        }\n    }, [selectedFeature]);\n\n    return (\n        <>\n            <Header>\n                <SparklineLayerSwitcher\n                    showDeviation={showDeviation}\n                    onChange={setShowDeviation.bind(this, !showDeviation)}\n                />\n            </Header>\n\n            <MapView webmapId={WEB_MAP_ID}>\n                <SparklineLayer\n                    showDeviation={showDeviation}\n                    nationalLevelData={unemploymentDataPathsUS}\n                    data={unemploymentDataPathsStates}\n                    visibleScale={VISIBLE_SCALE_STATES}\n                    color={SPARKLINE_COLOR_ORANGE}\n                    referenceLineColor={SPARKLINE_COLOR_BLUE}\n                />\n\n                <SparklineLayer\n                    showDeviation={showDeviation}\n                    nationalLevelData={unemploymentDataPathsUS}\n                    data={unemploymentDataPathsCounties}\n                    visibleScale={VISIBLE_SCALE_COUNTIES}\n                    color={SPARKLINE_COLOR_ORANGE}\n                    referenceLineColor={SPARKLINE_COLOR_BLUE}\n                />\n\n                <QueryTaskLayer\n                    key=\"query-4-US-Counties\"\n                    url={URL_US_COUNTIES_GENERALIZED}\n                    outFields={['FIPS']}\n                    visibleScale={VISIBLE_SCALE_COUNTIES}\n                    onSelect={setSelectedFeature}\n                />\n\n                <QueryTaskLayer\n                    key=\"query-4-US-States\"\n                    url={URL_US_STATES_GENERALIZED}\n                    outFields={['STATE_FIPS']}\n                    visibleScale={VISIBLE_SCALE_STATES}\n                    onSelect={setSelectedFeature}\n                />\n\n                <QueryResultLayer queryResult={selectedFeature} />\n            </MapView>\n\n            <InfoPanel\n                data={unemploymentData4SelectedFeature}\n                close={() => {\n                    setSelectedFeature(null);\n                    setUnemploymentData4SelectedFeature(null);\n                    updateFIPSInURLHashParams();\n                }}\n            />\n        </>\n    );\n};\n\nexport default AppLayout;\n","import React, { useContext } from 'react';\nimport classnames from 'classnames';\n// import styled from 'styled-components';\n\nimport { THEME_COLOR_ORANGE, THEME_COLOR_BLUE } from '../../constants/style';\nimport { AppContext, AppContextValue } from '../../contexts/AppContextProvider';\nimport { FontSize } from 'components/Atoms/CalciteElements/typing';\n\ntype Props = {\n    value: string;\n    title: string;\n    subtitle?: string;\n};\n\ntype TextColor = 'orange' | 'blue';\n\ntype FontSizeClass =\n    | 'font-size--3'\n    | 'font-size--2'\n    | 'font-size--1'\n    | 'font-size-0'\n    | 'font-size-1'\n    | 'font-size-2'\n    | 'font-size-3'\n    | 'font-size-4';\n\ntype TextSize = 'small' | 'medium' | 'large' | 'default';\n\nconst FontSizeLookup: Record<TextSize, FontSizeClass> = {\n    default: 'font-size-0',\n    small: 'font-size--2',\n    medium: 'font-size-2',\n    large: 'font-size-4',\n};\n\ntype TextProp = {\n    color?: TextColor;\n    size?: TextSize;\n    customFontSize?: string;\n    customLineHeight?: string;\n    children: React.ReactNode;\n};\n\nexport const ThemeText: React.FC<TextProp> = ({\n    color = 'blue',\n    size = 'default',\n    customFontSize,\n    customLineHeight,\n    children,\n}: TextProp) => {\n    // const fontSize = !customFontSize ? FontSizeLookup[size] : '';\n\n    // const { isMobileDevice } = useContext<AppContextValue>(AppContext)\n\n    const getFontSizeClass = (): FontSizeClass | '' => {\n        if (customFontSize) {\n            return '';\n        }\n\n        // if(isMobileDevice){\n        //     return 'font-size--1';\n        // }\n\n        return FontSizeLookup[size];\n    };\n\n    const classNames = classnames(`avenir-bold ${getFontSizeClass()}`, {\n        'text-theme-color-orange': color === 'orange',\n        'text-theme-color-blue': color === 'blue',\n    });\n\n    const style: React.CSSProperties =\n        customFontSize || customLineHeight\n            ? {\n                  fontSize: customFontSize || 'default',\n                  lineHeight: customLineHeight || 'default',\n              }\n            : null;\n\n    return (\n        <span className={classNames} style={style}>\n            {children}\n        </span>\n    );\n};\n\nconst InfoText: React.FC<Props> = ({ value, title, subtitle }: Props) => {\n    return (\n        <div className=\"trailer-quarter\">\n            <div>\n                <ThemeText color=\"blue\">{title}</ThemeText>\n            </div>\n            <div\n                style={{\n                    display: 'flex',\n                    alignItems: 'flex-start',\n                }}\n            >\n                <ThemeText color=\"orange\" size=\"large\" customLineHeight=\"1\">\n                    {value}\n                </ThemeText>\n\n                {subtitle ? (\n                    <div\n                        className=\"margin-left-quarter\"\n                        style={{\n                            lineHeight: '1',\n                        }}\n                    >\n                        <ThemeText\n                            color=\"orange\"\n                            size=\"small\"\n                            customLineHeight=\"1\"\n                        >\n                            {subtitle}\n                        </ThemeText>\n                    </div>\n                ) : null}\n            </div>\n        </div>\n    );\n};\n\nexport default InfoText;\n","import React from 'react';\n\nimport styled from 'styled-components';\nimport { ThemeText } from '../InfoPanel/InfoText';\nimport { SparklineLayerSwitcher } from '../';\n\nimport { PANEL_BACKGROUND, THEME_COLOR_BLUE } from '../../constants/style';\n\ntype Props = {\n    children: React.ReactNode;\n};\n\nconst HeaderContainer = styled.div`\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    display: flex;\n    background: linear-gradient(\n        to bottom,\n        ${PANEL_BACKGROUND} 0%,\n        ${PANEL_BACKGROUND} 50%,\n        rgba(0, 0, 0, 0) 100%\n    );\n    z-index: 5;\n    box-sizing: border-box;\n    padding: 0.5rem 1rem;\n    justify-content: space-between;\n\n    svg {\n        fill: ${THEME_COLOR_BLUE};\n        stroke: ${THEME_COLOR_BLUE};\n    }\n`;\n\nconst Title = () => {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                alignItems: 'center',\n            }}\n        >\n            <div className=\"phone-hide\">\n                <ThemeText size=\"large\" color=\"orange\">\n                    UnemploymentPulse\n                </ThemeText>\n            </div>\n\n            <div\n                className=\"margin-left-1 margin-right-1 tablet-hide\"\n                style={{\n                    lineHeight: '1.2',\n                }}\n            >\n                <ThemeText\n                    // size='large'\n                    color=\"blue\"\n                    customLineHeight=\"1\"\n                >\n                    14-Month US State and County\n                </ThemeText>\n\n                <br />\n\n                <ThemeText\n                    // size='large'\n                    color=\"blue\"\n                    customLineHeight=\"1\"\n                >\n                    Unemployment Trend Lines\n                </ThemeText>\n            </div>\n\n            <div\n                className=\"leader-quarter\"\n                style={{\n                    cursor: 'pointer',\n                }}\n            >\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    viewBox=\"0 0 24 24\"\n                    height=\"24\"\n                    width=\"24\"\n                >\n                    <path d=\"M12.5 7.5a1 1 0 1 1 1-1 1.002 1.002 0 0 1-1 1zM13 18V9h-2v1h1v8h-1v1h3v-1zm9.8-5.5A10.3 10.3 0 1 1 12.5 2.2a10.297 10.297 0 0 1 10.3 10.3zm-1 0a9.3 9.3 0 1 0-9.3 9.3 9.31 9.31 0 0 0 9.3-9.3z\" />\n                </svg>\n            </div>\n        </div>\n    );\n};\n\nconst Header: React.FC<Props> = ({ children }: Props) => {\n    return (\n        <HeaderContainer>\n            <Title />\n\n            {children}\n        </HeaderContainer>\n    );\n};\n\nexport default Header;\n","import React, { useMemo } from 'react';\n\nimport styled from 'styled-components';\nimport { UnempolymentData } from '../../../shared/types';\nimport InfoText, { ThemeText } from './InfoText';\nimport { numberFns } from 'helper-toolkit-ts';\nimport { SEPARATOR_COLOR } from '../../constants/style';\n\ntype Props = {\n    data: UnempolymentData;\n    // layout: InfoPanelLayout\n};\n\nconst SummaryInfoContainer = styled.div`\n    margin-right: 2rem;\n    width: 380px;\n`;\n\nconst SummaryInfo: React.FC<Props> = ({ data }: Props) => {\n    const participationRate = useMemo(() => {\n        return Math.floor(\n            ((data.attributes.workforce - data.attributes.unemployed) /\n                data.attributes.workforce) *\n                100\n        );\n    }, [data]);\n\n    return (\n        <SummaryInfoContainer>\n            <div className=\"trailer-half\">\n                <div>\n                    <ThemeText color=\"orange\" size=\"large\">\n                        {data.attributes.name}\n                    </ThemeText>\n                </div>\n\n                <div className=\"avenir-bold font-size-0\">\n                    <ThemeText color=\"orange\">\n                        {numberFns.numberWithCommas(data.attributes.population)}\n                    </ThemeText>{' '}\n                    <ThemeText>Total population</ThemeText>\n                </div>\n            </div>\n\n            <div\n                style={{\n                    display: 'flex',\n                }}\n            >\n                <div\n                    className=\"padding-right-1\"\n                    style={{\n                        borderRight: `1px solid ${SEPARATOR_COLOR}`,\n                    }}\n                >\n                    <InfoText\n                        title=\"Labor Force\"\n                        value={numberFns.numberWithCommas(\n                            data.attributes.workforce\n                        )}\n                    />\n\n                    <InfoText\n                        title=\"Participation Rate\"\n                        value={`${participationRate}%`}\n                    />\n                </div>\n\n                <div className=\"margin-left-1\">\n                    <InfoText\n                        title=\"Employed\"\n                        value={numberFns.numberWithCommas(\n                            data.attributes.workforce -\n                                data.attributes.unemployed\n                        )}\n                    />\n\n                    <InfoText\n                        title=\"Unemployed\"\n                        value={numberFns.numberWithCommas(\n                            data.attributes.unemployed\n                        )}\n                    />\n                </div>\n            </div>\n        </SummaryInfoContainer>\n    );\n};\n\nexport default SummaryInfo;\n","import React, { useContext, useMemo } from 'react';\n\nimport { UnempolymentData } from '../../../shared/types';\nimport InfoText, { ThemeText } from './InfoText';\n\nimport styled from 'styled-components';\nimport { numberFns } from 'helper-toolkit-ts';\nimport { SEPARATOR_COLOR, BREAKPOINT_SMALL } from '../../constants/style';\nimport { AppContext, AppContextValue } from '../../contexts/AppContextProvider';\n\nconst UnemploymentInfoContainer = styled.div`\n    margin-right: 4rem;\n    /* border-left: 1px solid ${SEPARATOR_COLOR};\n    border-right: 1px solid ${SEPARATOR_COLOR}; */\n\n    @media (max-width: ${BREAKPOINT_SMALL}px) {\n        margin-right: unset;\n        margin: 1rem 0;\n        padding: 1rem 0;\n        border-top: 1px solid ${SEPARATOR_COLOR};\n        border-bottom: 1px solid ${SEPARATOR_COLOR};\n    }\n`;\n\nconst UnemploymentRateTextWrap = styled.div`\n    line-height: 1.1;\n    margin-right: 2rem;\n\n    @media (max-width: ${BREAKPOINT_SMALL}px) {\n        margin-right: 0.75rem;\n    }\n`;\n\nconst StatisticsInfoContainer = styled.div`\n    display: flex;\n\n    @media (max-width: ${BREAKPOINT_SMALL}px) {\n        flex-wrap: wrap;\n    }\n`;\n\nconst InfoTextWrap = styled.div`\n    border-right: 1px solid ${SEPARATOR_COLOR};\n    min-width: 85px;\n    padding-right: 0.75rem;\n    margin-right: 1rem;\n\n    @media (max-width: ${BREAKPOINT_SMALL}px) {\n        border-right: none;\n        width: 45%;\n        padding-right: 0.25rem;\n        margin-right: 0.25rem;\n    }\n`;\n\ntype Props = {\n    data: UnempolymentData;\n    // layout: InfoPanelLayout\n};\n\ntype STATS_DATA = {\n    month: string;\n    value: number;\n};\n\nconst UnemploymentInfo: React.FC<Props> = ({ data }: Props) => {\n    const { months, isMobileDevice } = useContext<AppContextValue>(AppContext);\n\n    const [lastMonth, lastYear, lowest, highest] = useMemo(() => {\n        return getStatistics(data, months);\n    }, [data]);\n\n    return (\n        <UnemploymentInfoContainer>\n            <div>\n                <ThemeText>Unemployment Rate</ThemeText>\n            </div>\n\n            <div\n                style={{\n                    display: 'flex',\n                    marginBottom: isMobileDevice ? '1rem' : 'unset',\n                }}\n            >\n                <UnemploymentRateTextWrap>\n                    <div\n                        style={{\n                            display: 'flex',\n                        }}\n                    >\n                        <ThemeText\n                            color=\"orange\"\n                            customFontSize={isMobileDevice ? '5rem' : '7rem'}\n                        >\n                            {data.attributes.unemploymentRate}\n                        </ThemeText>\n\n                        <span className=\"leader-half\">\n                            <ThemeText\n                                color=\"orange\"\n                                customFontSize={\n                                    isMobileDevice ? '2rem' : '4rem'\n                                }\n                            >\n                                %\n                            </ThemeText>\n                        </span>\n                    </div>\n                </UnemploymentRateTextWrap>\n\n                <div\n                    style={{\n                        maxWidth: 170,\n                    }}\n                >\n                    <div\n                        style={{\n                            lineHeight: '1.2',\n                            marginTop: '.75rem',\n                            marginBottom: '.75rem',\n                        }}\n                    >\n                        {unemploymentCategory(data.attributes.unemploymentRate)}\n                    </div>\n\n                    <div\n                        style={{\n                            lineHeight: '1.2',\n                        }}\n                    >\n                        <ThemeText customLineHeight=\"1\">\n                            Ranks #\n                            {numberFns.numberWithCommas(data.attributes.rank)}\n                        </ThemeText>\n                        <br />\n                        <ThemeText customLineHeight=\"1\">\n                            {data.attributes.fips.length === 2\n                                ? 'of 50 States and DC'\n                                : 'of 3,141 Counties'}\n                        </ThemeText>\n                    </div>\n                </div>\n            </div>\n\n            <StatisticsInfoContainer>\n                <InfoTextWrap>\n                    <InfoText\n                        title=\"Last Month\"\n                        value={lastMonth.value.toString()}\n                    />\n                </InfoTextWrap>\n\n                <InfoTextWrap>\n                    <InfoText\n                        title=\"Last Year\"\n                        value={lastYear.value.toString()}\n                    />\n                </InfoTextWrap>\n\n                <InfoTextWrap>\n                    <InfoText\n                        title=\"14-Month HIGH\"\n                        subtitle={highest.month}\n                        value={highest.value.toString()}\n                    />\n                </InfoTextWrap>\n\n                <InfoText\n                    title=\"14-Month LOW\"\n                    subtitle={lowest.month}\n                    value={lowest.value.toString()}\n                />\n            </StatisticsInfoContainer>\n        </UnemploymentInfoContainer>\n    );\n};\n\nconst getStatistics = (\n    data: UnempolymentData,\n    months: string[]\n): STATS_DATA[] => {\n    const { PctUnemployed } = data;\n\n    const idx4lastMonth = PctUnemployed.length - 2;\n    // last year this month\n    const idx4LastYear = PctUnemployed.length - 13;\n    // 14 month low\n    let index4LowesetMonth = 0;\n    // 14 month high\n    let idx4highestMonth = 0;\n\n    for (let i = 0; i < PctUnemployed.length; i++) {\n        if (PctUnemployed[i] > PctUnemployed[idx4highestMonth]) {\n            idx4highestMonth = i;\n        }\n\n        if (PctUnemployed[i] < PctUnemployed[index4LowesetMonth]) {\n            index4LowesetMonth = i;\n        }\n    }\n\n    return [\n        idx4lastMonth,\n        idx4LastYear,\n        index4LowesetMonth,\n        idx4highestMonth,\n    ].map((idx) => {\n        const value = PctUnemployed[idx];\n        const [month, year] = months[idx].split(' ');\n        const formatedMonth = `${month.slice(0, 3).toUpperCase()} '${year.slice(\n            2\n        )}`;\n\n        return {\n            month: formatedMonth,\n            value,\n        };\n    });\n};\n\nconst unemploymentCategory = (rate: number): React.ReactNode => {\n    if (rate < 4) {\n        return (\n            <>\n                <ThemeText customLineHeight=\"1\">indicative of an</ThemeText>\n                <br />\n                <ThemeText customLineHeight=\"1\">Economic Boom</ThemeText>\n            </>\n        );\n    }\n\n    if (rate < 6) {\n        return (\n            <>\n                <ThemeText customLineHeight=\"1\">Healthy Levels</ThemeText>\n                <br />\n                <ThemeText customLineHeight=\"1\">of Employment</ThemeText>\n            </>\n        );\n    }\n\n    return (\n        <>\n            <ThemeText customLineHeight=\"1\">Recession Level</ThemeText>\n            <br />\n            <ThemeText customLineHeight=\"1\">Unemployment</ThemeText>\n        </>\n    );\n};\n\nexport default UnemploymentInfo;\n","import {\n    THEME_COLOR_BLUE,\n    THEME_COLOR_ORANGE,\n    SEPARATOR_COLOR,\n    PANEL_BACKGROUND,\n} from '../../constants/style';\n\nexport const MARGIN = {\n    top: 15,\n    right: 15,\n    bottom: 25,\n    left: 30,\n};\n\n// The inner padding determines the ratio of the range that is reserved for blank space between bands. must be within [0, 1]\nexport const SCALE_BAND_PADDING_INNER = 0.9;\n\nexport const BAR_COLOR = THEME_COLOR_ORANGE;\n\nexport const LINE_COLOR = THEME_COLOR_BLUE;\nexport const LINE_WIDTH = 2;\n\nexport const REF_LINE_COLOR = SEPARATOR_COLOR;\nexport const REF_LINE_STROKE = 0.5;\n\nexport const TOOLTIP_BACKGROUND_COLOR = PANEL_BACKGROUND;\nexport const TOOLTIP_TEXT_COLOR = '#fff';\nexport const TOOLTIP_BOXSHADOW_COLOR = '#rgba(0,0,0,.25)';\nexport const TOOLTIP_PADDING = '.5rem';\n\nexport const AXIS_TEXT_COLOR = THEME_COLOR_BLUE;\nexport const AXIS_LINE_COLOR = SEPARATOR_COLOR;\n","import React, { useRef, useEffect } from 'react';\n\nimport { select, ScaleBand, ScaleLinear } from 'd3';\n\nimport { BAR_COLOR } from '../constants';\n\nimport { QuickD3ChartData, SvgContainerData } from '../types';\n\ntype Props = {\n    xScale: ScaleBand<string | number>;\n    yScale: ScaleLinear<number, number>;\n    svgContainerData?: SvgContainerData;\n    data: QuickD3ChartData;\n    color?: string;\n};\n\nconst Bars: React.FC<Props> = ({\n    xScale,\n    yScale,\n    data,\n    svgContainerData,\n    color,\n}: Props) => {\n    const barsGroup = useRef<SVGGElement>();\n\n    const draw = () => {\n        const { dimension } = svgContainerData;\n\n        const { height } = dimension;\n\n        const existingBars = select(barsGroup.current).selectAll('rect');\n\n        if (existingBars.size()) {\n            existingBars.remove();\n        }\n\n        select(barsGroup.current)\n            .selectAll(`rect`)\n            .data(data)\n            .enter()\n            .append('rect')\n            .style('fill', color || BAR_COLOR)\n            .attr('x', (d) => xScale(d.key))\n            .attr('width', xScale.bandwidth())\n            .attr('y', (d) => yScale(d.value))\n            .attr('height', (d) => {\n                return height - yScale(d.value);\n            });\n    };\n\n    useEffect(() => {\n        if (svgContainerData && xScale && yScale && data) {\n            draw();\n        }\n    }, [xScale, yScale, data]);\n\n    return <g ref={barsGroup} className=\"bar-group\"></g>;\n};\n\nexport default Bars;\n","import React, { useEffect, useMemo } from 'react';\nimport {\n    select,\n    line,\n    ScaleBand,\n    ScaleLinear,\n    ScaleTime,\n    curveMonotoneX,\n} from 'd3';\n\nimport {\n    QuickD3ChartData,\n    QuickD3ChartDataItem,\n    SvgContainerData,\n} from '../types';\n\nimport { LINE_COLOR, LINE_WIDTH } from '../constants';\n\ntype Props = {\n    xScale:\n        | ScaleBand<string | number>\n        | ScaleTime<number, number>\n        | ScaleLinear<number, number>;\n    yScale: ScaleLinear<number, number>;\n    svgContainerData?: SvgContainerData;\n    data: QuickD3ChartData;\n    color?: string;\n    width?: number;\n};\n\nconst Line: React.FC<Props> = ({\n    xScale,\n    yScale,\n    data,\n    svgContainerData,\n    color,\n    width,\n}: Props) => {\n    const lineGroup = React.useRef<SVGGElement>();\n\n    // set offset if typeof xScale is ScaleBand\n    const xOffset = useMemo(() => {\n        return 'bandwidth' in xScale ? xScale.bandwidth() / 2 : 0;\n    }, [xScale]);\n\n    const valueline = useMemo(() => {\n        return line<QuickD3ChartDataItem>()\n            .curve(curveMonotoneX)\n            .x((d) => {\n                return 'bandwidth' in xScale\n                    ? xScale(d.key) + xOffset\n                    : xScale(+d.key);\n            })\n            .y((d) => yScale(d.value));\n    }, [xScale, yScale]);\n\n    const draw = () => {\n        remove();\n\n        select(lineGroup.current)\n            .append('path')\n            .data([data])\n            .attr('d', valueline)\n            .style('fill', 'none')\n            .style('stroke', color || LINE_COLOR)\n            .style('stroke-width', width || LINE_WIDTH);\n    };\n\n    const remove = () => {\n        const lines = select(lineGroup.current).selectAll('path');\n\n        // check the number of existing lines, if greater than 0; remove all existing ones\n        if (lines.size()) {\n            lines.remove().exit();\n        }\n    };\n\n    useEffect(() => {\n        if (svgContainerData && xScale && yScale && data) {\n            draw();\n        }\n    }, [xScale, yScale, data]);\n\n    return <g ref={lineGroup} className=\"line-group\"></g>;\n};\n\nexport default Line;\n","import React, { useRef, useEffect } from 'react';\n\nimport { select, mouse, ScaleBand, ScaleLinear, ScaleTime } from 'd3';\n\nimport { SvgContainerData } from '../types';\n\nimport { REF_LINE_COLOR, REF_LINE_STROKE } from '../constants';\n\nexport type PointerPositionOnHover = {\n    // index of the item on hover\n    index4ItemOnHover: number;\n    // position on x axis for the item on hover\n    xPosition: number;\n};\n\ntype Props = {\n    xScale:\n        | ScaleBand<string | number>\n        | ScaleLinear<number, number>\n        | ScaleTime<number, number>;\n    xDomain?: (string | number)[];\n    svgContainerData?: SvgContainerData;\n    onHover?: (data: PointerPositionOnHover) => void;\n};\n\nconst PointerEventsOverlay: React.FC<Props> = ({\n    xScale,\n    xDomain,\n    svgContainerData,\n    onHover,\n}: Props) => {\n    const containerG = useRef<SVGGElement>();\n\n    const itemOnHover = useRef<PointerPositionOnHover>();\n\n    const initRefLine = () => {\n        const { dimension } = svgContainerData;\n\n        const { height } = dimension;\n\n        const container = select(containerG.current);\n\n        const refLine = container.selectAll('line');\n\n        if (!refLine.size()) {\n            container\n                .append('line')\n                .attr('x1', 0)\n                .attr('y1', 0)\n                .attr('x2', 0)\n                .attr('y2', height)\n                .style('opacity', 0)\n                .attr('stroke-width', REF_LINE_STROKE)\n                .attr('stroke', REF_LINE_COLOR)\n                .style('fill', 'none');\n        }\n    };\n\n    const initOverlayRect = () => {\n        const { dimension } = svgContainerData;\n\n        const { height, width } = dimension;\n\n        const container = select(containerG.current);\n\n        container.selectAll('rect').remove();\n\n        container\n            .append('rect')\n            // .attr(\"class\", ClassNames.BackgroundRect)\n            .attr('width', width)\n            .attr('height', height)\n            .attr('fill', 'rgba(0,0,0,0)')\n            .on('mouseleave', () => {\n                setDataOnHover(null);\n            })\n            .on('mousemove', function () {\n                const mousePosX = mouse(this)[0];\n                // console.log(mousePosX)\n                setDataOnHover(getDataByMousePos(mousePosX));\n            });\n    };\n\n    const setDataOnHover = (data?: PointerPositionOnHover) => {\n        itemOnHover.current = data;\n        updateVerticalRefLinePos();\n        onHover(data);\n    };\n\n    const updateVerticalRefLinePos = (): void => {\n        const vRefLine = select(containerG.current).select('line');\n\n        const opacity = itemOnHover.current ? 1 : 0;\n\n        const xPos: number = itemOnHover.current\n            ? itemOnHover.current.xPosition\n            : 0;\n\n        vRefLine.attr('x1', xPos).attr('x2', xPos).style('opacity', opacity);\n    };\n\n    const getDataByMousePos = (mousePosX: number): PointerPositionOnHover => {\n        const { dimension } = svgContainerData;\n\n        const { width } = dimension;\n\n        // set offset if typeof xScale is ScaleBand\n        const offset = 'bandwidth' in xScale ? xScale.bandwidth() / 2 : 0;\n\n        // when pointer at left half of first bar OR at right half of last bar\n        if (mousePosX < offset || mousePosX > width - offset) {\n            const index = mousePosX < offset ? 0 : xDomain.length - 1;\n\n            const value = xDomain[index];\n\n            const xPosition =\n                'bandwidth' in xScale ? xScale(value) + offset : xScale(+value);\n\n            return {\n                index4ItemOnHover: index,\n                xPosition,\n            };\n        }\n\n        let itemIndex = -1;\n        let xPosition = 0;\n\n        for (let i = 0, len = xDomain.length; i < len; i++) {\n            const currItem = xDomain[i];\n            const currItemPos =\n                'bandwidth' in xScale\n                    ? xScale(currItem) + offset\n                    : xScale(+currItem);\n\n            const nextItemIndex = xDomain[i + 1] ? i + 1 : i;\n            const nextItem = xDomain[nextItemIndex];\n            const nextItemPos =\n                'bandwidth' in xScale\n                    ? xScale(nextItem) + offset\n                    : xScale(+nextItem);\n\n            if (mousePosX >= currItemPos && mousePosX <= nextItemPos) {\n                const distToCurrItem = Math.abs(mousePosX - currItemPos);\n                const distToNextItem = Math.abs(mousePosX - nextItemPos);\n\n                itemIndex = distToCurrItem < distToNextItem ? i : nextItemIndex;\n\n                xPosition =\n                    distToCurrItem < distToNextItem ? currItemPos : nextItemPos;\n\n                break;\n            }\n        }\n\n        return {\n            index4ItemOnHover: itemIndex,\n            xPosition,\n        };\n    };\n\n    useEffect(() => {\n        if (svgContainerData) {\n            initRefLine();\n            initOverlayRect();\n        }\n    }, [svgContainerData]);\n\n    return <g className=\"pointer-event-overlay-group\" ref={containerG} />;\n};\n\nexport default PointerEventsOverlay;\n","import React, { useRef, useEffect, useLayoutEffect } from 'react';\n\nimport { select } from 'd3';\n\nimport { SvgContainerData, Margin, Dimension } from '../types';\n\nimport { MARGIN } from '../constants';\n\ntype Props = {\n    margin?: Margin;\n    resizable?: boolean;\n    dimensionOnChange?: (dimension: Dimension) => void;\n    children: React.ReactNode;\n};\n\nconst SvgContainer: React.FC<Props> = ({\n    margin = MARGIN,\n    resizable,\n    dimensionOnChange,\n    children,\n}: Props) => {\n    const containerRef = useRef<HTMLDivElement>();\n    const svgRef = useRef<SVGSVGElement>();\n    const rootGroupRef = useRef<SVGGElement>();\n    const dimensionRef = useRef<Dimension>();\n\n    const [svgContainerData, setSvgContainerData] = React.useState<\n        SvgContainerData\n    >();\n\n    const updateDimension = () => {\n        const svg = select(svgRef.current).node();\n        const rootGroup = select(rootGroupRef.current).node();\n\n        const container = containerRef.current;\n        const width = container.offsetWidth - margin.left - margin.right;\n        const height = container.offsetHeight - margin.top - margin.bottom;\n\n        dimensionRef.current = {\n            height,\n            width,\n        };\n\n        if (dimensionOnChange) {\n            dimensionOnChange(dimensionRef.current);\n        }\n\n        setSvgContainerData({\n            svg,\n            rootGroup,\n            margin,\n            dimension: dimensionRef.current,\n        });\n    };\n\n    useEffect(() => {\n        updateDimension();\n    }, []);\n\n    useLayoutEffect(() => {\n        if (resizable) {\n            window.addEventListener('resize', updateDimension);\n        }\n\n        return () => {\n            window.removeEventListener('resize', updateDimension);\n        };\n    }, []);\n\n    return (\n        <div\n            ref={containerRef}\n            style={{\n                position: 'relative',\n                width: '100%',\n                height: '100%',\n            }}\n        >\n            <svg\n                ref={svgRef}\n                style={{\n                    width: '100%',\n                    height: '100%',\n                }}\n            >\n                <g\n                    ref={rootGroupRef}\n                    style={{\n                        transform: `translate(${margin.left}px, ${margin.top}px)`,\n                    }}\n                >\n                    {svgContainerData\n                        ? React.Children.map(children, (child) => {\n                              return React.cloneElement(\n                                  child as React.ReactElement<any>,\n                                  {\n                                      svgContainerData,\n                                  }\n                              );\n                          })\n                        : null}\n                </g>\n            </svg>\n        </div>\n    );\n};\n\nexport default SvgContainer;\n","import React, { useEffect } from 'react';\nimport { QuickD3ChartData, Dimension, Margin } from '../types';\nimport { PointerPositionOnHover } from './PointerEventsOverlay';\nimport {\n    MARGIN,\n    // TOOLTIP_BACKGROUND_COLOR,\n    // TOOLTIP_TEXT_COLOR,\n    TOOLTIP_BOXSHADOW_COLOR,\n    // TOOLTIP_PADDING\n} from '../constants';\n\nimport { TooltipContent } from './';\n\ntype Props = {\n    dimension: Dimension;\n    pointerPosition?: PointerPositionOnHover;\n    data4Bars?: QuickD3ChartData;\n    data4Line?: QuickD3ChartData;\n    margin?: Margin;\n};\n\ntype TooltipPos = {\n    top: number;\n    left: number;\n};\n\nconst Tooltip: React.FC<Props> = ({\n    dimension,\n    pointerPosition,\n    data4Bars,\n    data4Line,\n    margin = MARGIN,\n}: Props) => {\n    const tooltipRef = React.useRef<HTMLDivElement>();\n\n    const [tooltipPos, setTooltipPos] = React.useState<TooltipPos>({\n        top: 0,\n        left: 0,\n    });\n\n    const updateTooltipPosition = () => {\n        const tooltipDiv = tooltipRef.current;\n\n        if (!tooltipDiv) {\n            return;\n        }\n\n        const { width } = dimension;\n\n        const tooltipDivWidth = tooltipDiv.offsetWidth;\n        const tooltipDivHeight = tooltipDiv.offsetHeight;\n\n        const top = -(tooltipDivHeight - margin.top);\n        const xPosForItemOnHover = pointerPosition.xPosition + margin.left;\n\n        let left =\n            xPosForItemOnHover + tooltipDivWidth / 2 >= width + margin.left\n                ? xPosForItemOnHover - tooltipDivWidth\n                : xPosForItemOnHover - tooltipDivWidth / 2;\n\n        left = left >= margin.left ? left : margin.left;\n\n        setTooltipPos({\n            top,\n            left,\n        });\n    };\n\n    useEffect(() => {\n        if (pointerPosition) {\n            updateTooltipPosition();\n        }\n    }, [pointerPosition]);\n\n    return (\n        <div\n            ref={tooltipRef}\n            style={{\n                display: pointerPosition ? 'block' : 'none',\n                position: 'absolute',\n                left: `${tooltipPos.left}px`,\n                top: `${tooltipPos.top}px`,\n                pointerEvents: 'none',\n                boxSizing: 'border-box',\n                boxShadow: `0 0 10px 2px ${TOOLTIP_BOXSHADOW_COLOR}`,\n                zIndex: 5,\n            }}\n        >\n            <TooltipContent\n                index4ItemOnHover={\n                    pointerPosition ? pointerPosition.index4ItemOnHover : -1\n                }\n                barDataOnHover={\n                    pointerPosition && data4Bars\n                        ? data4Bars[pointerPosition.index4ItemOnHover]\n                        : undefined\n                }\n                lineDataOnHover={\n                    pointerPosition && data4Line\n                        ? data4Line[pointerPosition.index4ItemOnHover]\n                        : undefined\n                }\n            />\n        </div>\n    );\n};\n\nexport default Tooltip;\n","import React from 'react';\n\nimport {\n    TOOLTIP_BACKGROUND_COLOR,\n    TOOLTIP_TEXT_COLOR,\n    TOOLTIP_PADDING,\n} from '../constants';\nimport { QuickD3ChartDataItem } from '../types';\n\ntype Props = {\n    index4ItemOnHover?: number;\n    barDataOnHover?: QuickD3ChartDataItem;\n    lineDataOnHover?: QuickD3ChartDataItem;\n};\n\nconst TooltipContent: React.FC<Props> = ({\n    index4ItemOnHover,\n    barDataOnHover,\n    lineDataOnHover,\n}: Props) => {\n    return (\n        <div\n            className=\"font-size--1 avenir-bold\"\n            style={{\n                padding: TOOLTIP_PADDING,\n                background: TOOLTIP_BACKGROUND_COLOR,\n                color: TOOLTIP_TEXT_COLOR,\n            }}\n        >\n            <div>\n                {/* <span>{ barDataOnHover ? barDataOnHover.key : '' }</span>\n                <br /> */}\n                <span className=\"text-theme-color-orange\">\n                    Local: {barDataOnHover ? barDataOnHover.value : 'n/a'}%\n                </span>\n                <br />\n                <span className=\"text-theme-color-blue\">\n                    National: {lineDataOnHover ? lineDataOnHover.value : 'n/a'}%\n                </span>\n            </div>\n        </div>\n    );\n};\n\nexport default TooltipContent;\n","import React, { useContext, useEffect } from 'react';\n\nimport { select, axisBottom, timeFormat, AxisScale } from 'd3';\n\nimport { SvgContainerData } from '../types';\n\nimport { AXIS_TEXT_COLOR, AXIS_LINE_COLOR } from '../constants';\nimport {\n    AppContextValue,\n    AppContext,\n} from '../../../contexts/AppContextProvider';\n\ntype Props = {\n    scale: AxisScale<string | number>;\n    svgContainerData?: SvgContainerData;\n    tickValues?: (string | number)[];\n    timeFormatSpecifier?: string;\n};\n\nconst YAxis: React.FC<Props> = ({\n    scale,\n    svgContainerData,\n    tickValues,\n    timeFormatSpecifier,\n}: Props) => {\n    // const containerGroup = useRef<SVGGElement>();\n\n    const { months } = useContext<AppContextValue>(AppContext);\n\n    const formatTime = timeFormatSpecifier\n        ? timeFormat(timeFormatSpecifier)\n        : null;\n\n    const drawXAxis = () => {\n        const { rootGroup, dimension } = svgContainerData;\n\n        const { height } = dimension;\n\n        let xAxisGenerator = null;\n\n        xAxisGenerator = axisBottom(scale);\n\n        if (tickValues) {\n            xAxisGenerator.tickValues(tickValues);\n        }\n\n        if (formatTime) {\n            xAxisGenerator.tickFormat((d: number) => {\n                const date = new Date(+d);\n                return formatTime(date);\n            });\n        }\n\n        xAxisGenerator.tickFormat((d) => {\n            const [month, year] = months[d].split(' ');\n            const abbreviation = month.slice(0, 3);\n            const formated = abbreviation === 'Jan' ? year : abbreviation;\n            return formated;\n        });\n\n        const xAxisLabel = select(rootGroup).selectAll('.x.axis');\n\n        if (!xAxisLabel.size()) {\n            select(rootGroup)\n                .append('g')\n                .attr('class', 'x axis')\n                .attr('transform', `translate(0,${height})`)\n                .call(xAxisGenerator);\n\n            const xAxisG = select(rootGroup).select('.x.axis');\n\n            xAxisG\n                .selectAll('.domain, .tick line')\n                .attr('stroke', AXIS_LINE_COLOR);\n\n            xAxisG.selectAll('.tick text').style('fill', AXIS_TEXT_COLOR);\n        } else {\n            xAxisLabel\n                .attr('transform', `translate(0,${height})`)\n                .call(xAxisGenerator);\n        }\n    };\n\n    useEffect(() => {\n        if (svgContainerData) {\n            drawXAxis();\n        }\n    }, [scale, svgContainerData]);\n\n    return null;\n};\n\nexport default YAxis;\n","import React, { useEffect } from 'react';\n\nimport { select, axisLeft, AxisScale } from 'd3';\n\nimport { SvgContainerData } from '../types';\n\nimport { AXIS_TEXT_COLOR, AXIS_LINE_COLOR } from '../constants';\n\ntype Props = {\n    scale: AxisScale<number>;\n    svgContainerData?: SvgContainerData;\n};\n\nconst XAxis: React.FC<Props> = ({ scale, svgContainerData }: Props) => {\n    const drawYAxis = () => {\n        const { rootGroup } = svgContainerData;\n\n        // const { width } = dimension;\n\n        const yAxis = axisLeft(scale)\n            .ticks(3)\n            // .tickSizeInner(-width)\n            .tickPadding(5);\n\n        const yAxisLabel = select(rootGroup).selectAll('.y.axis');\n\n        if (!yAxisLabel.size()) {\n            select(rootGroup).append('g').attr('class', 'y axis').call(yAxis);\n\n            const yAxisG = select(rootGroup).select('.y.axis');\n\n            yAxisG\n                .selectAll('.domain, .tick line')\n                .attr('stroke', AXIS_LINE_COLOR);\n\n            yAxisG.selectAll('.tick text').style('fill', AXIS_TEXT_COLOR);\n        } else {\n            yAxisLabel.call(yAxis);\n        }\n    };\n\n    useEffect(() => {\n        if (svgContainerData) {\n            drawYAxis();\n        }\n    }, [scale, svgContainerData]);\n\n    return null;\n};\n\nexport default XAxis;\n","import React, { useState, useEffect, useMemo, useCallback } from 'react';\n\nimport {\n    ScaleBand,\n    scaleLinear,\n    scaleTime,\n    ScaleLinear,\n    ScaleTime,\n    AxisScale,\n    scaleBand,\n    max,\n    min,\n} from 'd3';\n\nimport {\n    // SvgContainerData,\n    Dimension,\n    Margin,\n} from '../types';\n\nimport {\n    SvgContainer,\n    Bars,\n    Line,\n    XAxis,\n    YAxis,\n    PointerEventsOverlay,\n    Tooltip,\n} from '../elements';\n\nimport { PointerPositionOnHover } from '../elements/PointerEventsOverlay';\n\nimport {\n    QuickD3ChartData,\n    // QuickD3ChartDataItem\n} from '../types';\nimport { SCALE_BAND_PADDING_INNER } from '../constants';\n\ntype XScale =\n    | ScaleBand<string | number>\n    | ScaleTime<number, number>\n    | ScaleLinear<number, number>;\ntype YScale = ScaleLinear<number, number>;\n\ntype Props = {\n    data4Bars?: QuickD3ChartData;\n    data4Line?: QuickD3ChartData;\n    barColor?: string;\n    lineColor?: string;\n    lineWidth?: number;\n    margin?: Margin;\n    timeFormatSpecifier?: string;\n    //if specified, use list of tick values for x axis\n    // xScaleTickValues?: (string | number)[];\n    // specify this value to show only 1 in every n ticks on x axis so it won't be crowded\n    numOfTicksOnXAxisToHide?: number;\n    resizable?: boolean;\n};\n\nconst BarLineCombined: React.FC<Props> = ({\n    data4Bars = [],\n    data4Line = [],\n    barColor,\n    lineColor,\n    lineWidth,\n    margin,\n    timeFormatSpecifier,\n    // xScaleTickValues,\n    numOfTicksOnXAxisToHide,\n    resizable = true,\n}: Props) => {\n    const [dimension, setDimension] = useState<Dimension>({\n        height: 0,\n        width: 0,\n    });\n\n    const [pointerPositionOnHover, setPointerPositionOnHover] = useState<\n        PointerPositionOnHover\n    >();\n\n    const xDomain = useMemo(() => {\n        if (!data4Bars.length && !data4Line.length) {\n            return [];\n        }\n\n        const data =\n            data4Bars && data4Bars.length ? [...data4Bars] : [...data4Line];\n\n        return data.map((d) => {\n            return typeof d.key === 'number' ? d.key.toString() : d.key;\n        });\n    }, [data4Bars, data4Line]);\n\n    const xScale = useMemo((): XScale => {\n        const { width } = dimension;\n\n        if (data4Bars && data4Bars.length) {\n            return scaleBand()\n                .paddingInner(SCALE_BAND_PADDING_INNER)\n                .range([0, width])\n                .domain(xDomain);\n        }\n\n        const xmin = +data4Line[0].key;\n        const xmax = max(data4Line, (d) => +d.key);\n\n        const xScale = timeFormatSpecifier\n            ? scaleTime().range([0, width]).domain([xmin, xmax])\n            : scaleLinear().range([0, width]).domain([xmin, xmax]);\n\n        return xScale;\n    }, [dimension, xDomain]);\n\n    const yScale = useMemo((): YScale => {\n        const { height } = dimension;\n\n        const ymax4Bars =\n            data4Bars && data4Bars.length ? max(data4Bars, (d) => d.value) : 0;\n\n        // const ymin4Bars = data4Bars && data4Bars.length\n        //     ? min(data4Bars, d=>d.value)\n        //     : undefined;\n\n        const ymax4Lines =\n            data4Line && data4Line.length\n                ? max(data4Line, (d) => d.value)\n                : undefined;\n\n        // const ymin4Lines = data4Line && data4Line.length\n        //     ? min(data4Line, d=>d.value)\n        //     : undefined;\n\n        const ymax = max([ymax4Bars, ymax4Lines]);\n\n        const ymin = 0;\n        // const ymin = min([ymin4Bars, ymin4Lines])\n\n        return scaleLinear<number, number>()\n            .range([height, 0])\n            .domain([ymin, ymax]);\n    }, [dimension, data4Bars, data4Line]);\n\n    const xScaleTickValues = useMemo(() => {\n        if (!numOfTicksOnXAxisToHide || numOfTicksOnXAxisToHide <= 1) {\n            return undefined;\n        }\n\n        return data4Bars\n            .map((d) => d.key)\n            .filter((d, i) => {\n                return !(i % numOfTicksOnXAxisToHide);\n            });\n    }, [data4Bars]);\n\n    return (\n        <div\n            style={{\n                position: 'relative',\n                width: '100%',\n                height: '100%',\n                boxSizing: 'border-box',\n            }}\n        >\n            <SvgContainer\n                margin={margin}\n                resizable={resizable}\n                dimensionOnChange={setDimension}\n            >\n                {data4Bars && data4Bars.length ? (\n                    <Bars\n                        data={data4Bars}\n                        xScale={xScale as ScaleBand<string | number>}\n                        yScale={yScale}\n                        color={barColor}\n                    />\n                ) : (\n                    <></>\n                )}\n\n                {data4Line && data4Line.length ? (\n                    <Line\n                        data={data4Line}\n                        xScale={xScale}\n                        yScale={yScale}\n                        color={lineColor}\n                        width={lineWidth}\n                    />\n                ) : (\n                    <></>\n                )}\n\n                <XAxis\n                    scale={xScale as AxisScale<string | number>}\n                    timeFormatSpecifier={timeFormatSpecifier}\n                    tickValues={xScaleTickValues}\n                />\n\n                <YAxis scale={yScale} />\n\n                <PointerEventsOverlay\n                    xDomain={xDomain}\n                    xScale={xScale}\n                    onHover={setPointerPositionOnHover}\n                />\n            </SvgContainer>\n\n            <Tooltip\n                pointerPosition={pointerPositionOnHover}\n                dimension={dimension}\n                data4Bars={data4Bars}\n                data4Line={data4Line}\n                margin={margin}\n            />\n        </div>\n    );\n};\n\nexport default BarLineCombined;\n","import React, { useContext, useMemo } from 'react';\nimport { UnempolymentData } from '../../../shared/types';\nimport { AppContext, AppContextValue } from '../../contexts/AppContextProvider';\n\nimport { BarLineCombined } from '../QuickD3Chart';\n\nimport { QuickD3ChartData, QuickD3ChartDataItem } from '../QuickD3Chart/types';\nimport { ThemeText } from './InfoText';\n\ntype Props = {\n    data: UnempolymentData;\n};\n\nconst getChartData = (values: number[], months: string[]) => {\n    return values.map((value, index) => {\n        return {\n            key: index,\n            value,\n        };\n    });\n};\n\nconst Chart: React.FC<Props> = ({ data }: Props) => {\n    const { unemploymentDataByFIPS, months } = useContext<AppContextValue>(\n        AppContext\n    );\n\n    const data4Line: QuickD3ChartData = useMemo(() => {\n        const USData = unemploymentDataByFIPS['0'];\n        const { PctUnemployed } = USData;\n        return getChartData(PctUnemployed, months);\n    }, [unemploymentDataByFIPS]);\n\n    const data4Bars: QuickD3ChartData = useMemo(() => {\n        const { PctUnemployed } = data;\n        return getChartData(PctUnemployed, months);\n    }, [data]);\n\n    return (\n        <div\n            style={{\n                position: 'relative',\n                flexGrow: 1,\n            }}\n        >\n            <div\n                className=\"text-right\"\n                style={{\n                    position: 'absolute',\n                    top: '.75rem',\n                    right: '1rem',\n                }}\n            >\n                <ThemeText color=\"orange\" size=\"small\">\n                    Local Unemployment\n                </ThemeText>\n                <br />\n                <ThemeText color=\"blue\" size=\"small\">\n                    National Unemployment\n                </ThemeText>\n                <br />\n                <ThemeText color=\"blue\">\n                    { data4Line ? data4Line[data4Line.length - 1].value : ''}%\n                </ThemeText>\n            </div>\n            <BarLineCombined data4Bars={data4Bars} data4Line={data4Line} />\n        </div>\n    );\n};\n\nexport default Chart;\n","import React from 'react';\n\nimport styled from 'styled-components';\nimport { UnempolymentData } from '../../../shared/types';\n\nimport SummaryInfo from './SummaryInfo';\nimport UnemploymentInfo from './UnemploymentInfo';\nimport Chart from './Chart';\n\nimport {\n    PANEL_BACKGROUND,\n    THEME_COLOR_BLUE,\n    BREAKPOINT_SMALL,\n} from '../../constants/style';\n\nconst InfoPanelContainer = styled.div`\n    position: absolute;\n    bottom: 0;\n    left: 0;\n    right: 0;\n    height: 250px;\n    display: flex;\n    box-sizing: border-box;\n    background: linear-gradient(\n        to top,\n        ${PANEL_BACKGROUND} 0%,\n        ${PANEL_BACKGROUND} 80%,\n        rgba(0, 0, 0, 0) 100%\n    );\n    padding: 1rem 2rem;\n    /* box-shadow: 0 0 10px 2px #156aa4; */\n    z-index: 5;\n\n    @media (max-width: ${BREAKPOINT_SMALL}px) {\n        top: 0;\n        bottom: 0;\n        height: unset;\n        flex-direction: column;\n        overflow-y: auto;\n\n        background: ${PANEL_BACKGROUND};\n    }\n`;\n\nconst CloseBtnDiv = styled.div`\n    position: absolute;\n    top: 0.5rem;\n    right: 0.5rem;\n    cursor: pointer;\n\n    svg {\n        stroke: ${THEME_COLOR_BLUE};\n        fill: ${THEME_COLOR_BLUE};\n    }\n`;\n\ntype Props = {\n    data: UnempolymentData;\n    close: () => void;\n    // layout: InfoPanelLayout\n};\n\nconst InfoPanel: React.FC<Props> = ({ data, close }: Props) => {\n    return data ? (\n        <InfoPanelContainer className=\"animate-fade-in\">\n            <SummaryInfo data={data} />\n            <UnemploymentInfo data={data} />\n            <Chart data={data} />\n\n            <CloseBtnDiv onClick={close}>\n                <svg height=\"32\" width=\"32\" viewBox=\"0 0 32 32\" className=\"\">\n                    <path d=\"M23.985 8.722L16.707 16l7.278 7.278-.707.707L16 16.707l-7.278 7.278-.707-.707L15.293 16 8.015 8.722l.707-.707L16 15.293l7.278-7.278z\" />\n                </svg>\n            </CloseBtnDiv>\n        </InfoPanelContainer>\n    ) : null;\n};\n\nexport default InfoPanel;\n","import React, { useState, useEffect } from 'react';\n\nimport { loadModules } from 'esri-loader';\nimport IMapView from 'esri/views/MapView';\nimport IGraphic from 'esri/Graphic';\nimport IGraphicsLayer from 'esri/layers/GraphicsLayer';\nimport ISimpleFillSymbol from 'esri/symbols/SimpleFillSymbol';\nimport IPolygon from 'esri/geometry/Polygon';\nimport {\n    SPARKLINE_COLOR_ORANGE,\n    THEME_COLOR_ORANGE,\n} from '../../constants/style';\n// import IPoint from 'esri/geometry/Point';\n// import IGraphicsLayer from 'esri/layers/GraphicsLayer';\n// import IwatchUtils from 'esri/core/watchUtils';\n\ntype Props = {\n    queryResult: IGraphic;\n    mapView?: IMapView;\n};\n\nconst QueryResult: React.FC<Props> = ({ queryResult, mapView }: Props) => {\n    const [graphicLayer, setGraphicLayer] = useState<IGraphicsLayer>();\n\n    const init = async () => {\n        type Modules = [typeof IGraphicsLayer];\n\n        try {\n            const [GraphicsLayer] = await (loadModules([\n                'esri/layers/GraphicsLayer',\n            ]) as Promise<Modules>);\n\n            const layer = new GraphicsLayer({\n                opacity: 0.2,\n                // effect: 'blur(3px)',\n            });\n\n            mapView.map.add(layer, 0);\n\n            setGraphicLayer(layer);\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    const showQueryResult = async () => {\n        type Modules = [\n            typeof IGraphic,\n            typeof IPolygon,\n            typeof ISimpleFillSymbol\n        ];\n\n        const [Graphic, Polygon, SimpleFillSymbol] = await (loadModules([\n            'esri/Graphic',\n            'esri/geometry/Polygon',\n            'esri/symbols/SimpleFillSymbol',\n        ]) as Promise<Modules>);\n\n        const graphic = new Graphic({\n            geometry: new Polygon(queryResult.geometry),\n        });\n\n        graphic.symbol = new SimpleFillSymbol({\n            color: [33, 117, 160, 255],\n            // outline: {\n            //     // autocasts as new SimpleLineSymbol()\n            //     color: SPARKLINE_COLOR_ORANGE,\n            //     width: 1,\n            // },\n        });\n\n        graphicLayer.add(graphic);\n    };\n\n    useEffect(() => {\n        if (mapView) {\n            init();\n        }\n    }, [mapView]);\n\n    useEffect(() => {\n        if (graphicLayer) {\n            graphicLayer.removeAll();\n\n            if (queryResult) {\n                showQueryResult();\n            }\n        }\n    }, [queryResult]);\n\n    return null;\n};\n\nexport default QueryResult;\n","import React, { useEffect, useRef } from 'react';\n\nimport { loadModules } from 'esri-loader';\n\nimport IMapView from 'esri/views/MapView';\nimport IFeatureLayer from 'esri/layers/FeatureLayer';\n// import IPoint from 'esri/geometry/Point';\nimport IGraphic from 'esri/Graphic';\nimport IFeatureLayerView from 'esri/views/layers/FeatureLayerView';\n\ntype Props = {\n    url: string;\n    // itemId: string;\n    outFields?: string[];\n    mapView?: IMapView;\n    visibleScale?: {\n        min: number;\n        max: number;\n    };\n    // onStart?: ()=>void;\n    onSelect: (feature: IGraphic) => void;\n    // pointerOnMove: (position: TooltipPosition) => void;\n    // featureOnHover: (feature: IGraphic) => void;\n};\n\nconst QueryTaskLayer: React.FC<Props> = ({\n    url,\n    // itemId,\n    outFields,\n    mapView,\n    visibleScale,\n    // onStart,\n    onSelect,\n    // pointerOnMove,\n    // featureOnHover,\n}) => {\n    const layerRef = useRef<IFeatureLayer>();\n    const layerViewRef = useRef<IFeatureLayerView>();\n    // const mouseMoveDelay = useRef<number>();\n\n    const isLayerInVisibleRange = () => {\n        return (\n            mapView.scale < layerRef.current.minScale &&\n            mapView.scale > layerRef.current.maxScale\n        );\n    };\n\n    const init = async () => {\n        type Modules = [typeof IFeatureLayer];\n\n        try {\n            const [FeatureLayer] = await (loadModules([\n                'esri/layers/FeatureLayer',\n            ]) as Promise<Modules>);\n\n            const layer = new FeatureLayer({\n                url,\n                // portalItem: {\n                //     id: itemId\n                // },\n                minScale: visibleScale && visibleScale.min,\n                maxScale: visibleScale && visibleScale.max,\n                visible: true,\n                popupEnabled: false,\n                outFields,\n                opacity: 0,\n            });\n\n            mapView.map.add(layer);\n\n            mapView.whenLayerView(layer).then((layerView) => {\n                // console.log(layerView)\n\n                layerRef.current = layer;\n                layerViewRef.current = layerView;\n\n                initEventListeners();\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    const queryFeatures = async ({\n        event,\n        where,\n    }: {\n        event?: __esri.MapViewClickEvent;\n        where?: string;\n    }) => {\n        // console.log(mapView.scale)\n\n        const isVisible = isLayerInVisibleRange();\n\n        if (isVisible) {\n            where = where || '1=1';\n\n            const geometry = event ? mapView.toMap(event) : null;\n\n            const results = await layerViewRef.current.queryFeatures({\n                where,\n                geometry,\n                returnGeometry: true,\n                outFields: outFields || ['*'],\n            });\n\n            onSelect(\n                results.features && results.features.length\n                    ? results.features[0]\n                    : undefined\n            );\n        }\n    };\n\n    const initEventListeners = () => {\n        mapView.on('click', (event) => {\n            queryFeatures({ event });\n        });\n    };\n\n    useEffect(() => {\n        if (mapView) {\n            init();\n        }\n    }, [mapView]);\n\n    // useEffect(()=>{\n    //     if(layerViewRef.current && defaultFIPS){\n\n    //         const fieldName4FIPS = outFields[0]\n    //         const where = `${fieldName4FIPS}='${defaultFIPS}'`\n    //         queryFeatures({\n    //             where\n    //         })\n    //     }\n    // }, [layerViewRef.current])\n\n    return null;\n};\n\nexport default QueryTaskLayer;\n","import React, { useRef, useState, useEffect } from 'react';\n\nimport {\n    MonthlyUmempolymentDataPaths,\n    FeatureWithPathData,\n} from '../../../shared/types';\n\nimport { loadModules } from 'esri-loader';\nimport IMapView from 'esri/views/MapView';\nimport ICIMSymbol from 'esri/symbols/CIMSymbol';\nimport IGraphic from 'esri/Graphic';\nimport IPoint from 'esri/geometry/Point';\nimport IGraphicsLayer from 'esri/layers/GraphicsLayer';\nimport IwatchUtils from 'esri/core/watchUtils';\n\ntype Props = {\n    data: MonthlyUmempolymentDataPaths;\n    // will be used to render national trend\n    nationalLevelData: MonthlyUmempolymentDataPaths;\n    showDeviation?: boolean;\n    color: number[];\n    referenceLineColor: number[];\n    visibleScale?: {\n        min: number;\n        max: number;\n    };\n    mapView?: IMapView;\n};\n\nconst SparklineLayer: React.FC<Props> = ({\n    data,\n    nationalLevelData,\n    showDeviation,\n    color,\n    referenceLineColor,\n    visibleScale,\n    mapView,\n}) => {\n    const renderDealy = useRef<number>();\n\n    const layerRef = useRef<IGraphicsLayer>();\n\n    const [isLayerInVisibleScale, setIsLayerInVisibleScale] = useState<boolean>(\n        false\n    );\n\n    const init = async () => {\n        type Modules = [typeof IGraphicsLayer, typeof IwatchUtils];\n\n        try {\n            const [GraphicsLayer, watchUtils] = await (loadModules([\n                'esri/layers/GraphicsLayer',\n                'esri/core/watchUtils',\n            ]) as Promise<Modules>);\n\n            layerRef.current = new GraphicsLayer({\n                minScale: visibleScale && visibleScale.min,\n                maxScale: visibleScale && visibleScale.max,\n                visible: false,\n            });\n\n            mapView.map.add(layerRef.current);\n\n            watchUtils.whenTrue(mapView, 'stationary', () => {\n                const isInVisibleScale =\n                    mapView.scale < visibleScale.min &&\n                    mapView.scale > visibleScale.max;\n                setIsLayerInVisibleScale(isInVisibleScale);\n            });\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    const draw = async () => {\n        const layer = layerRef.current;\n\n        type Modules = [typeof ICIMSymbol, typeof IGraphic, typeof IPoint];\n\n        const nationalLevelPathData =\n            nationalLevelData.features[0].PctUnemployed.path;\n        const nationalLevelFrame = nationalLevelData.frames.PctUnemployed;\n\n        // console.log(nationalLevelData);\n\n        try {\n            const [CIMSymbol, Graphic, Point] = await (loadModules([\n                'esri/symbols/CIMSymbol',\n                'esri/Graphic',\n                'esri/geometry/Point',\n            ]) as Promise<Modules>);\n\n            const { features, frames } = data;\n\n            const frame = showDeviation\n                ? frames.PctUnemployedDeviation\n                : frames.PctUnemployed; // frames.PctUnemployed;\n\n            const addGraphicsByChunk = (startIndex = 0) => {\n                // console.log('doChunk', startIndex)\n                const chunckNum = 800;\n                const endIndex =\n                    startIndex + chunckNum < features.length\n                        ? startIndex + chunckNum\n                        : features.length;\n\n                const data: FeatureWithPathData[] = features.slice(\n                    startIndex,\n                    endIndex\n                );\n\n                const graphics = data.map((feature) => {\n                    const {\n                        geometry,\n                        PctUnemployed,\n                        PctUnemployedDeviation,\n                    } = feature;\n\n                    const pathData = showDeviation\n                        ? PctUnemployedDeviation\n                        : PctUnemployed;\n\n                    const anchorPoint = {\n                        x: 0,\n                        y: showDeviation ? 0 : -0.5,\n                    };\n\n                    const size = showDeviation ? 60 : 30;\n\n                    const { path } = pathData;\n\n                    // const color = [50, 100, 255, 255];\n\n                    // Create the CIM symbol:\n                    //  - set the size value\n                    //  - assign the generated path to the marker's geometry\n                    const symbol = new CIMSymbol({\n                        data: {\n                            type: 'CIMSymbolReference',\n                            symbol: {\n                                type: 'CIMPointSymbol',\n                                symbolLayers: [\n                                    {\n                                        type: 'CIMVectorMarker',\n                                        anchorPoint,\n                                        anchorPointUnits: 'Relative',\n                                        enable: true,\n                                        scaleSymbolsProportionally: false,\n                                        respectFrame: true,\n                                        size,\n                                        frame,\n                                        markerGraphics: [\n                                            {\n                                                type: 'CIMMarkerGraphic',\n                                                geometry: {\n                                                    paths: [path],\n                                                },\n                                                symbol: {\n                                                    type: 'CIMLineSymbol',\n                                                    symbolLayers: [\n                                                        {\n                                                            type:\n                                                                'CIMSolidStroke',\n                                                            width: 1,\n                                                            color,\n                                                        },\n                                                    ],\n                                                },\n                                            },\n                                        ],\n                                    },\n                                    !showDeviation\n                                        ? {\n                                              type: 'CIMVectorMarker',\n                                              anchorPoint,\n                                              anchorPointUnits: 'Relative',\n                                              enable: true,\n                                              scaleSymbolsProportionally: false,\n                                              respectFrame: true,\n                                              size,\n                                              frame: nationalLevelFrame,\n                                              markerGraphics: [\n                                                  {\n                                                      type: 'CIMMarkerGraphic',\n                                                      geometry: {\n                                                          paths: [\n                                                              nationalLevelPathData,\n                                                          ],\n                                                      },\n                                                      symbol: {\n                                                          type: 'CIMLineSymbol',\n                                                          symbolLayers: [\n                                                              {\n                                                                  type:\n                                                                      'CIMSolidStroke',\n                                                                  width: 1,\n                                                                  color: referenceLineColor,\n                                                              },\n                                                          ],\n                                                      },\n                                                  },\n                                              ],\n                                          }\n                                        : null,\n                                    showDeviation\n                                        ? {\n                                              type: 'CIMVectorMarker',\n                                              anchorPoint,\n                                              anchorPointUnits: 'Relative',\n                                              enable: true,\n                                              scaleSymbolsProportionally: false,\n                                              respectFrame: true,\n                                              size,\n                                              frame,\n                                              markerGraphics: [\n                                                  {\n                                                      type: 'CIMMarkerGraphic',\n                                                      geometry: {\n                                                          paths: [\n                                                              [\n                                                                  [0, 0],\n                                                                  [\n                                                                      frame.xmax,\n                                                                      0,\n                                                                  ],\n                                                              ],\n                                                          ],\n                                                      },\n                                                      symbol: {\n                                                          type: 'CIMLineSymbol',\n                                                          symbolLayers: [\n                                                              {\n                                                                  type:\n                                                                      'CIMSolidStroke',\n                                                                  width: 1,\n                                                                  color: referenceLineColor,\n                                                              },\n                                                          ],\n                                                      },\n                                                  },\n                                              ],\n                                          }\n                                        : null,\n                                ],\n                            },\n                        },\n                    });\n\n                    const graphic = new Graphic({\n                        geometry: new Point({\n                            latitude: geometry.y,\n                            longitude: geometry.x,\n                        }),\n                        symbol,\n                    });\n\n                    return graphic;\n                });\n\n                layer.addMany(graphics);\n\n                if (startIndex + chunckNum < features.length) {\n                    renderDealy.current = setTimeout(() => {\n                        addGraphicsByChunk(startIndex + chunckNum);\n                    }, 1);\n                } else {\n                    layer.visible = true;\n                }\n            };\n\n            addGraphicsByChunk(0);\n        } catch (err) {\n            console.error(err);\n        }\n    };\n\n    useEffect(() => {\n        if (mapView) {\n            init();\n        }\n    }, [mapView]);\n\n    useEffect(() => {\n        if (layerRef.current && data) {\n            layerRef.current.removeAll();\n            clearTimeout(renderDealy.current);\n\n            if (isLayerInVisibleScale) {\n                draw();\n            }\n        }\n    }, [layerRef, data, showDeviation]);\n\n    useEffect(() => {\n        if (\n            data &&\n            isLayerInVisibleScale &&\n            !layerRef.current.graphics.length\n        ) {\n            clearTimeout(renderDealy.current);\n            draw();\n        }\n    }, [isLayerInVisibleScale]);\n\n    return null;\n};\n\nexport default SparklineLayer;\n","import React from 'react';\n// import classnames from 'classnames';\nimport { THEME_COLOR_ORANGE } from '../../constants/style';\nimport { ThemeText } from '../InfoPanel/InfoText';\n\ntype Props = {\n    showDeviation: boolean;\n    onChange: () => void;\n};\n\ntype SwitcherBtnProps = {\n    isActive: boolean;\n    onClick: () => void;\n    children: React.ReactNode;\n};\n\nconst SwitcherBtn: React.FC<SwitcherBtnProps> = ({\n    isActive,\n    onClick,\n    children,\n}: SwitcherBtnProps) => {\n    const borderColor = isActive ? THEME_COLOR_ORANGE : 'transparent';\n\n    return (\n        <div\n            onClick={onClick}\n            style={{\n                borderBottom: `3px solid ${borderColor}`,\n                margin: '0 .5rem',\n                // lineHeight: '1.2',\n                cursor: 'pointer',\n            }}\n        >\n            {children}\n        </div>\n    );\n};\n\nconst SparklineLayerSwitcher: React.FC<Props> = ({\n    showDeviation,\n    onChange,\n}: Props) => {\n    return (\n        <div\n            style={{\n                display: 'flex',\n                alignItems: 'center',\n            }}\n        >\n            <SwitcherBtn isActive={!showDeviation} onClick={onChange}>\n                <ThemeText\n                    color=\"orange\"\n                    // customLineHeight='1.1'\n                >\n                    Local Rate\n                </ThemeText>{' '}\n                <ThemeText\n                    color=\"blue\"\n                    // customLineHeight='1'\n                >\n                    {'& '} National Rate\n                </ThemeText>\n            </SwitcherBtn>\n\n            <SwitcherBtn isActive={showDeviation} onClick={onChange}>\n                <ThemeText\n                    color=\"orange\"\n                    // customLineHeight='1'\n                >\n                    Local Difference\n                </ThemeText>{' '}\n                <ThemeText\n                    color=\"blue\"\n                    // customLineHeight='1'\n                >\n                    from National Rate\n                </ThemeText>\n            </SwitcherBtn>\n        </div>\n    );\n};\n\nexport default SparklineLayerSwitcher;\n","import React from 'react';\n\nimport { AppLayout } from '../../components';\n\nconst RootPage = () => {\n    return <AppLayout />;\n};\n\nexport default RootPage;\n","import './styles/index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// import { Provider as ReduxProvider } from 'react-redux';\n// import configureAppStore, { getPreloadedState } from './store/configureStore';\n\nimport AppContextProvider from './contexts/AppContextProvider';\n\nimport { RootPage } from './pages';\n\n(async () => {\n    // const preloadedState = getPreloadedState();\n\n    ReactDOM.render(\n        <React.StrictMode>\n            <AppContextProvider>\n                <RootPage />\n            </AppContextProvider>\n        </React.StrictMode>,\n        document.getElementById('root')\n    );\n})();\n"],"sourceRoot":""}